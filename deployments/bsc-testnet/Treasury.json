{
  "address": "0x7ACBCE6544fbA13A95bBe99E807240Fa6394c96B",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seigniorage",
          "type": "uint256"
        }
      ],
      "name": "BoardroomFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bondAmount",
          "type": "uint256"
        }
      ],
      "name": "BoughtBonds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bondAmount",
          "type": "uint256"
        }
      ],
      "name": "BurnedBonds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seigniorage",
          "type": "uint256"
        }
      ],
      "name": "DaoFundFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seigniorage",
          "type": "uint256"
        }
      ],
      "name": "DevFundFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "at",
          "type": "uint256"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seigniorage",
          "type": "uint256"
        }
      ],
      "name": "InsuranceFundFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bondAmount",
          "type": "uint256"
        }
      ],
      "name": "RedeemedBonds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "twap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expansion",
          "type": "uint256"
        }
      ],
      "name": "Seigniorage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seigniorage",
          "type": "uint256"
        }
      ],
      "name": "TreasuryFunded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allocateSeigniorage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "boardroom",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "boardroomAllocateSeigniorage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "boardroomGovernanceRecoverUnsupported",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawLockupEpochs",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rewardLockupEpochs",
          "type": "uint256"
        }
      ],
      "name": "boardroomSetLockUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "boardroomSetOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reserveFund",
          "type": "address"
        }
      ],
      "name": "boardroomSetReserveFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "boardroomStakeFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "boardroomWithdrawFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bond",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bondDepletionFloorPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bootstrapEpochs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bootstrapSupplyExpansionPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetPrice",
          "type": "uint256"
        }
      ],
      "name": "buyBonds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoFund",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoFundSharedPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devFund",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devFundSharedPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "discountPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochSupplyContractionLeft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "excludedFromTotalSupply",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBondDiscountRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBondPremiumRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBurnableTokenLeft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_burnableTokenLeft",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRedeemableBonds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_redeemableBonds",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenCirculatingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenUpdatedPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_tokenPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "governanceRecoverUnsupported",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bond",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_share",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_boardroom",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "insuranceFund",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "insuranceFundSharedPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxDebtRatioPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxDiscountRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "maxExpansionTiers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPremiumRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupplyContractionPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupplyExpansionPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintingFactorForPayingDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextEpochPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "premiumPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "premiumThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "previousEpochTokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bondAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetPrice",
          "type": "uint256"
        }
      ],
      "name": "redeemBonds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "regulationStats",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seigniorageExpansionFloorPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seigniorageSaved",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_boardroom",
          "type": "address"
        }
      ],
      "name": "setBoardroom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_boardroomStakeFee",
          "type": "uint256"
        }
      ],
      "name": "setBoardroomStakeFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_boardroomWithdrawFee",
          "type": "uint256"
        }
      ],
      "name": "setBoardroomWithdrawFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bondDepletionFloorPercent",
          "type": "uint256"
        }
      ],
      "name": "setBondDepletionFloorPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bootstrapEpochs",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bootstrapSupplyExpansionPercent",
          "type": "uint256"
        }
      ],
      "name": "setBootstrap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_discountPercent",
          "type": "uint256"
        }
      ],
      "name": "setDiscountPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_daoFund",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_daoFundSharedPercent",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_devFund",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_devFundSharedPercent",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_insuranceFund",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_insuranceFundSharedPercent",
          "type": "uint256"
        }
      ],
      "name": "setExtraFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxDebtRatioPercent",
          "type": "uint256"
        }
      ],
      "name": "setMaxDebtRatioPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxDiscountRate",
          "type": "uint256"
        }
      ],
      "name": "setMaxDiscountRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_index",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "setMaxExpansionTiersEntry",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxPremiumRate",
          "type": "uint256"
        }
      ],
      "name": "setMaxPremiumRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxSupplyContractionPercent",
          "type": "uint256"
        }
      ],
      "name": "setMaxSupplyContractionPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxSupplyExpansionPercent",
          "type": "uint256"
        }
      ],
      "name": "setMaxSupplyExpansionPercents",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintingFactorForPayingDebt",
          "type": "uint256"
        }
      ],
      "name": "setMintingFactorForPayingDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "setOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_premiumPercent",
          "type": "uint256"
        }
      ],
      "name": "setPremiumPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_premiumThreshold",
          "type": "uint256"
        }
      ],
      "name": "setPremiumThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_regulationStats",
          "type": "address"
        }
      ],
      "name": "setRegulationStats",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_index",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "setSupplyTiersEntry",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenOracle",
          "type": "address"
        }
      ],
      "name": "setTokenOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenPriceCeiling",
          "type": "uint256"
        }
      ],
      "name": "setTokenPriceCeiling",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "share",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "supplyTiers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenPriceCeiling",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenPriceOne",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x05eff99ab6fe29005bb7d2b35599335aa23771e846e8f1046f93db289311e874",
  "receipt": {
    "to": null,
    "from": "0x0DCC098Fa701906a49c3196B1FD2464F4802F4E2",
    "contractAddress": "0x7ACBCE6544fbA13A95bBe99E807240Fa6394c96B",
    "transactionIndex": 2,
    "gasUsed": "4359083",
    "logsBloom": "0x
    "blockHash": "0xd1385efc008a2ebcc953fdc7575077e24f52379689ba3b4f7283ba7babe7c4a8",
    "transactionHash": "0x05eff99ab6fe29005bb7d2b35599335aa23771e846e8f1046f93db289311e874",
    "logs": [],
    "blockNumber": 19541940,
    "cumulativeGasUsed": "6499976",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d2a7bbe40846e68fb0ed2db2af96c568",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seigniorage\",\"type\":\"uint256\"}],\"name\":\"BoardroomFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"}],\"name\":\"BoughtBonds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"}],\"name\":\"BurnedBonds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seigniorage\",\"type\":\"uint256\"}],\"name\":\"DaoFundFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seigniorage\",\"type\":\"uint256\"}],\"name\":\"DevFundFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"at\",\"type\":\"uint256\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seigniorage\",\"type\":\"uint256\"}],\"name\":\"InsuranceFundFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"}],\"name\":\"RedeemedBonds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"twap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expansion\",\"type\":\"uint256\"}],\"name\":\"Seigniorage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seigniorage\",\"type\":\"uint256\"}],\"name\":\"TreasuryFunded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocateSeigniorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boardroom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"boardroomAllocateSeigniorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"boardroomGovernanceRecoverUnsupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawLockupEpochs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardLockupEpochs\",\"type\":\"uint256\"}],\"name\":\"boardroomSetLockUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"boardroomSetOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserveFund\",\"type\":\"address\"}],\"name\":\"boardroomSetReserveFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boardroomStakeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boardroomWithdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bond\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondDepletionFloorPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bootstrapEpochs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bootstrapSupplyExpansionPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetPrice\",\"type\":\"uint256\"}],\"name\":\"buyBonds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoFundSharedPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFundSharedPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discountPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochSupplyContractionLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"excludedFromTotalSupply\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBondDiscountRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBondPremiumRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnableTokenLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnableTokenLeft\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRedeemableBonds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_redeemableBonds\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenUpdatedPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"governanceRecoverUnsupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bond\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_share\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_boardroom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insuranceFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insuranceFundSharedPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDebtRatioPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDiscountRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"maxExpansionTiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPremiumRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyContractionPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyExpansionPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingFactorForPayingDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEpochPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premiumPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premiumThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousEpochTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bondAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetPrice\",\"type\":\"uint256\"}],\"name\":\"redeemBonds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"regulationStats\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seigniorageExpansionFloorPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seigniorageSaved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_boardroom\",\"type\":\"address\"}],\"name\":\"setBoardroom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_boardroomStakeFee\",\"type\":\"uint256\"}],\"name\":\"setBoardroomStakeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_boardroomWithdrawFee\",\"type\":\"uint256\"}],\"name\":\"setBoardroomWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bondDepletionFloorPercent\",\"type\":\"uint256\"}],\"name\":\"setBondDepletionFloorPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bootstrapEpochs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bootstrapSupplyExpansionPercent\",\"type\":\"uint256\"}],\"name\":\"setBootstrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_discountPercent\",\"type\":\"uint256\"}],\"name\":\"setDiscountPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_daoFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_daoFundSharedPercent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_devFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_devFundSharedPercent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_insuranceFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_insuranceFundSharedPercent\",\"type\":\"uint256\"}],\"name\":\"setExtraFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDebtRatioPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxDebtRatioPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDiscountRate\",\"type\":\"uint256\"}],\"name\":\"setMaxDiscountRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMaxExpansionTiersEntry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPremiumRate\",\"type\":\"uint256\"}],\"name\":\"setMaxPremiumRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupplyContractionPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxSupplyContractionPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupplyExpansionPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxSupplyExpansionPercents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintingFactorForPayingDebt\",\"type\":\"uint256\"}],\"name\":\"setMintingFactorForPayingDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_premiumPercent\",\"type\":\"uint256\"}],\"name\":\"setPremiumPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_premiumThreshold\",\"type\":\"uint256\"}],\"name\":\"setPremiumThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_regulationStats\",\"type\":\"address\"}],\"name\":\"setRegulationStats\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setSupplyTiersEntry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenOracle\",\"type\":\"address\"}],\"name\":\"setTokenOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenPriceCeiling\",\"type\":\"uint256\"}],\"name\":\"setTokenPriceCeiling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"share\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supplyTiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPriceCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPriceOne\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Treasury.sol\":\"Treasury\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\",\"keccak256\":\"0x9486045e189facd2e868ece35249872598ef03f1087fb6fa4d1161842daa2287\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/Treasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./lib/Babylonian.sol\\\";\\nimport \\\"./owner/Operator.sol\\\";\\nimport \\\"./utils/ContractGuard.sol\\\";\\nimport \\\"./interfaces/IBasisAsset.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\nimport \\\"./interfaces/IBoardroom.sol\\\";\\nimport \\\"./interfaces/IRegulationStats.sol\\\";\\n\\n/*\\n\\n$$$$$$$\\\\   $$$$$$\\\\  $$\\\\      $$\\\\ $$$$$$$\\\\                                                            \\n$$  __$$\\\\ $$  __$$\\\\ $$$\\\\    $$$ |$$  __$$\\\\                                                           \\n$$ |  $$ |$$ /  $$ |$$$$\\\\  $$$$ |$$ |  $$ |    $$$$$$\\\\$$$$\\\\   $$$$$$\\\\  $$$$$$$\\\\   $$$$$$\\\\  $$\\\\   $$\\\\ \\n$$$$$$$\\\\ |$$ |  $$ |$$\\\\$$\\\\$$ $$ |$$$$$$$\\\\ |    $$  _$$  _$$\\\\ $$  __$$\\\\ $$  __$$\\\\ $$  __$$\\\\ $$ |  $$ |\\n$$  __$$\\\\ $$ |  $$ |$$ \\\\$$$  $$ |$$  __$$\\\\     $$ / $$ / $$ |$$ /  $$ |$$ |  $$ |$$$$$$$$ |$$ |  $$ |\\n$$ |  $$ |$$ |  $$ |$$ |\\\\$  /$$ |$$ |  $$ |    $$ | $$ | $$ |$$ |  $$ |$$ |  $$ |$$   ____|$$ |  $$ |\\n$$$$$$$  | $$$$$$  |$$ | \\\\_/ $$ |$$$$$$$  |$$\\\\ $$ | $$ | $$ |\\\\$$$$$$  |$$ |  $$ |\\\\$$$$$$$\\\\ \\\\$$$$$$$ |\\n\\\\_______/  \\\\______/ \\\\__|     \\\\__|\\\\_______/ \\\\__|\\\\__| \\\\__| \\\\__| \\\\______/ \\\\__|  \\\\__| \\\\_______| \\\\____$$ |\\n                                                                                           $$\\\\   $$ |\\n                                                                                           \\\\$$$$$$  |\\n    http://bomb.money                                                                      \\\\______/ \\n*/\\ncontract Treasury is ContractGuard, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    /* ========= CONSTANT VARIABLES ======== */\\n\\n    uint256 public constant PERIOD = 8 hours;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    // governance\\n    address public operator;\\n\\n    // flags\\n    bool public initialized = false;\\n\\n    // epoch\\n    uint256 public startTime;\\n    uint256 public epoch = 0;\\n    uint256 public epochSupplyContractionLeft = 0;\\n\\n    // exclusions from total supply\\n    address[] public excludedFromTotalSupply = [\\n        address(0xbc0BC07A7e05b9a11A8e504FC29eb49D08445475), // TokenGenesisPool\\n        address(0x6E6BB04f91C928FBdC7f036462B0474107d86ef1) // new TokenRewardPool\\n    ];\\n\\n    // core components\\n    address public token;\\n    address public bond;\\n    address public share;\\n\\n    address public boardroom;\\n    address public tokenOracle;\\n\\n    uint256 public boardroomWithdrawFee;\\n    uint256 public boardroomStakeFee;\\n    // price\\n    uint256 public tokenPriceOne;\\n    uint256 public tokenPriceCeiling;\\n\\n    uint256 public seigniorageSaved;\\n\\n    uint256[] public supplyTiers;\\n    uint256[] public maxExpansionTiers;\\n\\n    uint256 public maxSupplyExpansionPercent;\\n    uint256 public bondDepletionFloorPercent;\\n    uint256 public seigniorageExpansionFloorPercent;\\n    uint256 public maxSupplyContractionPercent;\\n    uint256 public maxDebtRatioPercent;\\n\\n    // 28 first epochs (1 week) with 4.5% expansion regardless of BOMB price\\n    uint256 public bootstrapEpochs;\\n    uint256 public bootstrapSupplyExpansionPercent;\\n\\n    /* =================== Added variables =================== */\\n    uint256 public previousEpochTokenPrice;\\n    uint256 public maxDiscountRate; // when purchasing bond\\n    uint256 public maxPremiumRate; // when redeeming bond\\n    uint256 public discountPercent;\\n    uint256 public premiumThreshold;\\n    uint256 public premiumPercent;\\n    uint256 public mintingFactorForPayingDebt; // print extra BOMB during debt phase\\n\\n    // 45% for Stakers in boardroom (THIS)\\n    // 45% for DAO fund\\n    // 2% for DEV fund\\n    // 8% for INSURANCE fund\\n    address public daoFund;\\n    uint256 public daoFundSharedPercent;\\n\\n    address public devFund;\\n    uint256 public devFundSharedPercent;\\n\\n    address public insuranceFund;\\n    uint256 public insuranceFundSharedPercent;\\n\\n    address public regulationStats;\\n\\n\\n    /* =================== Events =================== */\\n\\n    event Initialized(address indexed executor, uint256 at);\\n    event BurnedBonds(address indexed from, uint256 bondAmount);\\n    event RedeemedBonds(address indexed from, uint256 tokenAmount, uint256 bondAmount);\\n    event BoughtBonds(address indexed from, uint256 tokenAmount, uint256 bondAmount);\\n    event TreasuryFunded(uint256 timestamp, uint256 seigniorage);\\n    event BoardroomFunded(uint256 timestamp, uint256 seigniorage);\\n    event DaoFundFunded(uint256 timestamp, uint256 seigniorage);\\n    event DevFundFunded(uint256 timestamp, uint256 seigniorage);\\n    event InsuranceFundFunded(uint256 timestamp, uint256 seigniorage);\\n    event Seigniorage(uint256 epoch, uint256 twap, uint256 expansion);\\n\\n    /* =================== Modifier =================== */\\n\\n    modifier onlyOperator() {\\n        require(operator == msg.sender, \\\"Treasury: caller is not the operator\\\");\\n        _;\\n    }\\n\\n    modifier checkCondition() {\\n        require(now >= startTime, \\\"Treasury: not started yet\\\");\\n\\n        _;\\n    }\\n\\n    modifier checkEpoch() {\\n        require(now >= nextEpochPoint(), \\\"Treasury: not opened yet\\\");\\n\\n        _;\\n\\n        epoch = epoch.add(1);\\n        epochSupplyContractionLeft = (getTokenPrice() > tokenPriceCeiling) ? 0 : getTokenCirculatingSupply().mul(maxSupplyContractionPercent).div(10000);\\n    }\\n\\n    modifier checkOperator() {\\n        require(\\n            IBasisAsset(token).operator() == address(this) &&\\n                IBasisAsset(bond).operator() == address(this) &&\\n             //   IBasisAsset(share).operator() == address(this) &&\\n                Operator(boardroom).operator() == address(this),\\n            \\\"Treasury: need more permission\\\"\\n        );\\n\\n        _;\\n    }\\n\\n    modifier notInitialized() {\\n        require(!initialized, \\\"Treasury: already initialized\\\");\\n\\n        _;\\n    }\\n\\n    /* ========== VIEW FUNCTIONS ========== */\\n\\n    function isInitialized() public view returns (bool) {\\n        return initialized;\\n    }\\n\\n    // epoch\\n    function nextEpochPoint() public view returns (uint256) {\\n        return startTime.add(epoch.mul(PERIOD));\\n    }\\n\\n    // oracle\\n    function getTokenPrice() public view returns (uint256 tokenPrice) {\\n        try IOracle(tokenOracle).consult(token, 1e18) returns (uint144 price) {\\n            return uint256(price);\\n        } catch {\\n            revert(\\\"Treasury: failed to consult BOMB price from the oracle\\\");\\n        }\\n    }\\n\\n    function getTokenUpdatedPrice() public view returns (uint256 _tokenPrice) {\\n        try IOracle(tokenOracle).twap(token, 1e18) returns (uint144 price) {\\n            return uint256(price);\\n        } catch {\\n            revert(\\\"Treasury: failed to consult BOMB price from the oracle\\\");\\n        }\\n    }\\n\\n    // budget\\n    function getReserve() public view returns (uint256) {\\n        return seigniorageSaved;\\n    }\\n\\n    function getBurnableTokenLeft() public view returns (uint256 _burnableTokenLeft) {\\n        uint256 _tokenPrice = getTokenPrice();\\n        if (_tokenPrice <= tokenPriceOne) {\\n            uint256 _tokenSupply = getTokenCirculatingSupply();\\n            uint256 _bondMaxSupply = _tokenSupply.mul(maxDebtRatioPercent).div(10000);\\n            uint256 _bondSupply = IERC20(bond).totalSupply();\\n            if (_bondMaxSupply > _bondSupply) {\\n                uint256 _maxMintableBond = _bondMaxSupply.sub(_bondSupply);\\n                uint256 _maxBurnableToken = _maxMintableBond.mul(_tokenPrice).div(1e18);\\n                _burnableTokenLeft = Math.min(epochSupplyContractionLeft, _maxBurnableToken);\\n            }\\n        }\\n    }\\n\\n    function getRedeemableBonds() public view returns (uint256 _redeemableBonds) {\\n        uint256 _tokenPrice = getTokenPrice();\\n        if (_tokenPrice > tokenPriceCeiling) {\\n            uint256 _totalToken = IERC20(token).balanceOf(address(this));\\n            uint256 _rate = getBondPremiumRate();\\n            if (_rate > 0) {\\n                _redeemableBonds = _totalToken.mul(1e18).div(_rate);\\n            }\\n        }\\n    }\\n\\n    function getBondDiscountRate() public view returns (uint256 _rate) {\\n        uint256 _tokenPrice = getTokenPrice();\\n        if (_tokenPrice <= tokenPriceOne) {\\n            if (discountPercent == 0) {\\n                // no discount\\n                _rate = tokenPriceOne;\\n            } else {\\n                uint256 _bondAmount = tokenPriceOne.mul(1e18).div(_tokenPrice); // to burn 1 BOMB\\n                uint256 _discountAmount = _bondAmount.sub(tokenPriceOne).mul(discountPercent).div(10000);\\n                _rate = tokenPriceOne.add(_discountAmount);\\n                if (maxDiscountRate > 0 && _rate > maxDiscountRate) {\\n                    _rate = maxDiscountRate;\\n                }\\n            }\\n        }\\n    }\\n\\n    function getBondPremiumRate() public view returns (uint256 _rate) {\\n        uint256 _tokenPrice = getTokenPrice();\\n        if (_tokenPrice > tokenPriceCeiling) {\\n            uint256 _tokenPricePremiumThreshold = tokenPriceOne.mul(premiumThreshold).div(100);\\n            if (_tokenPrice >= _tokenPricePremiumThreshold) {\\n                //Price > 1.10\\n                uint256 _premiumAmount = _tokenPrice.sub(tokenPriceOne).mul(premiumPercent).div(10000);\\n                _rate = tokenPriceOne.add(_premiumAmount);\\n                if (maxPremiumRate > 0 && _rate > maxPremiumRate) {\\n                    _rate = maxPremiumRate;\\n                }\\n            } else {\\n                // no premium bonus\\n                _rate = tokenPriceOne;\\n            }\\n        }\\n    }\\n\\n    /* ========== GOVERNANCE ========== */\\n\\n    function initialize(\\n        address _token,\\n        address _bond,\\n        address _share,\\n        address _tokenOracle,\\n        address _boardroom,\\n        uint256 _startTime\\n    ) public notInitialized {\\n        token = _token;\\n        bond = _bond;\\n        share = _share;\\n        tokenOracle = _tokenOracle;\\n        boardroom = _boardroom;\\n        startTime = _startTime;\\n\\n        tokenPriceOne = 10**18; // This is to allow a PEG of 10,000 BOMB per BTC\\n        tokenPriceCeiling = tokenPriceOne.mul(1001).div(1000);\\n\\n        // Dynamic max expansion percent\\n        supplyTiers = [0 ether, 100000 ether, 250000 ether, 500000 ether, 1000000 ether, 5000000 ether];\\n        maxExpansionTiers = [150, 150, 150, 150, 150, 150];\\n\\n        maxSupplyExpansionPercent = 350; // Upto 4.5% supply for expansion\\n\\n        bondDepletionFloorPercent = 10000; // 100% of Bond supply for depletion floor\\n        seigniorageExpansionFloorPercent = 3500; // At least 35% of expansion reserved for boardroom\\n        maxSupplyContractionPercent = 300; // Upto 3.0% supply for contraction (to burn BOMB and mint tBOND)\\n        maxDebtRatioPercent = 3500; // Upto 35% supply of tBOND to purchase\\n\\n        premiumThreshold = 105;\\n        premiumPercent = 7000;\\n\\n        // First 21 epochs with 3.5% expansion\\n        bootstrapEpochs = 21;\\n        bootstrapSupplyExpansionPercent = 350;\\n\\n        // set seigniorageSaved to it's balance\\n        seigniorageSaved = IERC20(token).balanceOf(address(this));\\n\\n        initialized = true;\\n        operator = msg.sender;\\n        emit Initialized(msg.sender, block.number);\\n    }\\n\\n    function setOperator(address _operator) external onlyOperator {\\n        operator = _operator;\\n    }\\n\\n    function setBoardroom(address _boardroom) external onlyOperator {\\n        boardroom = _boardroom;\\n    }\\n\\n    function setRegulationStats(address _regulationStats) external onlyOperator {\\n        regulationStats = _regulationStats;\\n    }\\n\\n    function setBoardroomWithdrawFee(uint256 _boardroomWithdrawFee) external onlyOperator {\\n        require(_boardroomWithdrawFee <= 20, \\\"Max withdraw fee is 20%\\\");\\n        boardroomWithdrawFee = _boardroomWithdrawFee;\\n        IBoardroom(boardroom).setWithdrawFee(boardroomWithdrawFee);\\n    }\\n\\n    function setBoardroomStakeFee(uint256 _boardroomStakeFee) external onlyOperator {\\n        require(_boardroomStakeFee <= 5, \\\"Max stake fee is 5%\\\");\\n        boardroomStakeFee = _boardroomStakeFee;\\n        IBoardroom(boardroom).setStakeFee(boardroomStakeFee);\\n    }\\n\\n    function setTokenOracle(address _tokenOracle) external onlyOperator {\\n        tokenOracle = _tokenOracle;\\n    }\\n\\n    function setTokenPriceCeiling(uint256 _tokenPriceCeiling) external onlyOperator {\\n        require(_tokenPriceCeiling >= tokenPriceOne && _tokenPriceCeiling <= tokenPriceOne.mul(120).div(100), \\\"out of range\\\"); // [$1.0, $1.2]\\n        tokenPriceCeiling = _tokenPriceCeiling;\\n    }\\n\\n    function setMaxSupplyExpansionPercents(uint256 _maxSupplyExpansionPercent) external onlyOperator {\\n        require(_maxSupplyExpansionPercent >= 10 && _maxSupplyExpansionPercent <= 1000, \\\"_maxSupplyExpansionPercent: out of range\\\"); // [0.1%, 10%]\\n        maxSupplyExpansionPercent = _maxSupplyExpansionPercent;\\n    }\\n\\n    function setSupplyTiersEntry(uint8 _index, uint256 _value) external onlyOperator returns (bool) {\\n        require(_index >= 0, \\\"Index has to be higher than 0\\\");\\n        require(_index < 9, \\\"Index has to be lower than count of tiers\\\");\\n        if (_index > 0) {\\n            require(_value > supplyTiers[_index - 1]);\\n        }\\n        if (_index < 8) {\\n            require(_value < supplyTiers[_index + 1]);\\n        }\\n        supplyTiers[_index] = _value;\\n        return true;\\n    }\\n\\n    function setMaxExpansionTiersEntry(uint8 _index, uint256 _value) external onlyOperator returns (bool) {\\n        require(_index >= 0, \\\"Index has to be higher than 0\\\");\\n        require(_index < 9, \\\"Index has to be lower than count of tiers\\\");\\n        require(_value >= 10 && _value <= 1000, \\\"_value: out of range\\\"); // [0.1%, 10%]\\n        maxExpansionTiers[_index] = _value;\\n        return true;\\n    }\\n\\n    function setBondDepletionFloorPercent(uint256 _bondDepletionFloorPercent) external onlyOperator {\\n        require(_bondDepletionFloorPercent >= 500 && _bondDepletionFloorPercent <= 10000, \\\"out of range\\\"); // [5%, 100%]\\n        bondDepletionFloorPercent = _bondDepletionFloorPercent;\\n    }\\n\\n    function setMaxSupplyContractionPercent(uint256 _maxSupplyContractionPercent) external onlyOperator {\\n        require(_maxSupplyContractionPercent >= 100 && _maxSupplyContractionPercent <= 1500, \\\"out of range\\\"); // [0.1%, 15%]\\n        maxSupplyContractionPercent = _maxSupplyContractionPercent;\\n    }\\n\\n    function setMaxDebtRatioPercent(uint256 _maxDebtRatioPercent) external onlyOperator {\\n        require(_maxDebtRatioPercent >= 1000 && _maxDebtRatioPercent <= 10000, \\\"out of range\\\"); // [10%, 100%]\\n        maxDebtRatioPercent = _maxDebtRatioPercent;\\n    }\\n\\n    function setBootstrap(uint256 _bootstrapEpochs, uint256 _bootstrapSupplyExpansionPercent) external onlyOperator {\\n        require(_bootstrapEpochs <= 120, \\\"_bootstrapEpochs: out of range\\\"); // <= 1 month\\n        require(_bootstrapSupplyExpansionPercent >= 100 && _bootstrapSupplyExpansionPercent <= 1000, \\\"_bootstrapSupplyExpansionPercent: out of range\\\"); // [1%, 10%]\\n        bootstrapEpochs = _bootstrapEpochs;\\n        bootstrapSupplyExpansionPercent = _bootstrapSupplyExpansionPercent;\\n    }\\n\\n    function setExtraFunds(\\n        address _daoFund,\\n        uint256 _daoFundSharedPercent,\\n        address _devFund,\\n        uint256 _devFundSharedPercent,\\n        address _insuranceFund,\\n        uint256 _insuranceFundSharedPercent\\n    ) external onlyOperator {\\n        require(_daoFund != address(0), \\\"zero\\\");\\n        require(_daoFundSharedPercent <= 5000, \\\"out of range\\\"); // <= 50%\\n        require(_devFund != address(0), \\\"zero\\\");\\n        require(_devFundSharedPercent <= 1000, \\\"out of range\\\"); // <= 10%\\n        require(_insuranceFund != address(0), \\\"zero\\\");\\n        require(_insuranceFundSharedPercent <= 1000, \\\"out of range\\\"); // <= 10%\\n\\n        daoFund = _daoFund;\\n        daoFundSharedPercent = _daoFundSharedPercent;\\n\\n        devFund = _devFund;\\n        devFundSharedPercent = _devFundSharedPercent;\\n\\n        insuranceFund = _insuranceFund;\\n        insuranceFundSharedPercent = _insuranceFundSharedPercent;\\n    }\\n\\n    function setMaxDiscountRate(uint256 _maxDiscountRate) external onlyOperator {\\n        maxDiscountRate = _maxDiscountRate;\\n    }\\n\\n    function setMaxPremiumRate(uint256 _maxPremiumRate) external onlyOperator {\\n        maxPremiumRate = _maxPremiumRate;\\n    }\\n\\n    function setDiscountPercent(uint256 _discountPercent) external onlyOperator {\\n        require(_discountPercent <= 20000, \\\"_discountPercent is over 200%\\\");\\n        discountPercent = _discountPercent;\\n    }\\n\\n    function setPremiumThreshold(uint256 _premiumThreshold) external onlyOperator {\\n        require(_premiumThreshold <= 150, \\\"_premiumThreshold is higher than 1.5\\\");\\n        premiumThreshold = _premiumThreshold;\\n    }\\n\\n    function setPremiumPercent(uint256 _premiumPercent) external onlyOperator {\\n        require(_premiumPercent <= 20000, \\\"_premiumPercent is over 200%\\\");\\n        premiumPercent = _premiumPercent;\\n    }\\n\\n    function setMintingFactorForPayingDebt(uint256 _mintingFactorForPayingDebt) external onlyOperator {\\n        require(_mintingFactorForPayingDebt >= 10000 && _mintingFactorForPayingDebt <= 20000, \\\"_mintingFactorForPayingDebt: out of range\\\"); // [100%, 200%]\\n        mintingFactorForPayingDebt = _mintingFactorForPayingDebt;\\n    }\\n\\n    /* ========== MUTABLE FUNCTIONS ========== */\\n\\n    function _updateTokenPrice() internal {\\n        try IOracle(tokenOracle).update() {} catch {}\\n    }\\n\\n    function getTokenCirculatingSupply() public view returns (uint256) {\\n        IERC20 tokenErc20 = IERC20(token);\\n        uint256 totalSupply = tokenErc20.totalSupply();\\n        uint256 balanceExcluded = 0;\\n        for (uint8 entryId = 0; entryId < excludedFromTotalSupply.length; ++entryId) {\\n            balanceExcluded = balanceExcluded.add(tokenErc20.balanceOf(excludedFromTotalSupply[entryId]));\\n        }\\n        return totalSupply.sub(balanceExcluded);\\n    }\\n\\n    function buyBonds(uint256 _tokenAmount, uint256 targetPrice) external onlyOneBlock checkCondition checkOperator {\\n        require(_tokenAmount > 0, \\\"Treasury: cannot purchase bonds with zero amount\\\");\\n\\n        uint256 tokenPrice = getTokenPrice();\\n        require(tokenPrice == targetPrice, \\\"Treasury: BOMB price moved\\\");\\n        require(\\n            tokenPrice < tokenPriceOne, // price < $1\\n            \\\"Treasury: tokenPrice not eligible for bond purchase\\\"\\n        );\\n\\n        require(_tokenAmount <= epochSupplyContractionLeft, \\\"Treasury: not enough bond left to purchase\\\");\\n\\n        uint256 _rate = getBondDiscountRate();\\n        require(_rate > 0, \\\"Treasury: invalid bond rate\\\");\\n\\n        uint256 _bondAmount = _tokenAmount.mul(_rate).div(1e18);\\n        uint256 tokenSupply = getTokenCirculatingSupply();\\n        uint256 newBondSupply = IERC20(bond).totalSupply().add(_bondAmount);\\n        require(newBondSupply <= tokenSupply.mul(maxDebtRatioPercent).div(10000), \\\"over max debt ratio\\\");\\n\\n        IBasisAsset(token).burnFrom(msg.sender, _tokenAmount);\\n        IBasisAsset(bond).mint(msg.sender, _bondAmount);\\n\\n        epochSupplyContractionLeft = epochSupplyContractionLeft.sub(_tokenAmount);\\n        _updateTokenPrice();\\n        if (regulationStats != address(0)) IRegulationStats(regulationStats).addBonded(epoch, _bondAmount);\\n\\n        emit BoughtBonds(msg.sender, _tokenAmount, _bondAmount);\\n    }\\n\\n    function redeemBonds(uint256 _bondAmount, uint256 targetPrice) external onlyOneBlock checkCondition checkOperator {\\n        require(_bondAmount > 0, \\\"Treasury: cannot redeem bonds with zero amount\\\");\\n\\n        uint256 tokenPrice = getTokenPrice();\\n        require(tokenPrice == targetPrice, \\\"Treasury: BOMB price moved\\\");\\n        require(\\n            tokenPrice > tokenPriceCeiling, // price > $1.01\\n            \\\"Treasury: tokenPrice not eligible for bond purchase\\\"\\n        );\\n\\n        uint256 _rate = getBondPremiumRate();\\n        require(_rate > 0, \\\"Treasury: invalid bond rate\\\");\\n\\n        uint256 _tokenAmount = _bondAmount.mul(_rate).div(1e18);\\n        require(IERC20(token).balanceOf(address(this)) >= _tokenAmount, \\\"Treasury: treasury has no more budget\\\");\\n\\n        seigniorageSaved = seigniorageSaved.sub(Math.min(seigniorageSaved, _tokenAmount));\\n\\n        IBasisAsset(bond).burnFrom(msg.sender, _bondAmount);\\n        IERC20(token).safeTransfer(msg.sender, _tokenAmount);\\n\\n        _updateTokenPrice();\\n        if (regulationStats != address(0)) IRegulationStats(regulationStats).addRedeemed(epoch, _tokenAmount);\\n\\n        emit RedeemedBonds(msg.sender, _tokenAmount, _bondAmount);\\n    }\\n\\n    function _sendToBoardroom(uint256 _amount) internal {\\n        IBasisAsset(token).mint(address(this), _amount);\\n\\n        uint256 _daoFundSharedAmount = 0;\\n        if (daoFundSharedPercent > 0) {\\n            _daoFundSharedAmount = _amount.mul(daoFundSharedPercent).div(10000);\\n            IERC20(token).transfer(daoFund, _daoFundSharedAmount);\\n            emit DaoFundFunded(now, _daoFundSharedAmount);\\n        }\\n\\n        uint256 _devFundSharedAmount = 0;\\n        if (devFundSharedPercent > 0) {\\n            _devFundSharedAmount = _amount.mul(devFundSharedPercent).div(10000);\\n            IERC20(token).transfer(devFund, _devFundSharedAmount);\\n            emit DevFundFunded(now, _devFundSharedAmount);\\n        }\\n\\n        uint256 _insuranceFundSharedAmount = 0;\\n        if (insuranceFundSharedPercent > 0) {\\n            _insuranceFundSharedAmount = _amount.mul(insuranceFundSharedPercent).div(10000);\\n            IERC20(token).transfer(insuranceFund, _insuranceFundSharedAmount);\\n            emit InsuranceFundFunded(now, _insuranceFundSharedAmount);\\n        }\\n\\n\\n        _amount = _amount.sub(_daoFundSharedAmount).sub(_devFundSharedAmount).sub(_insuranceFundSharedAmount);\\n\\n        IERC20(token).safeApprove(boardroom, 0);\\n        IERC20(token).safeApprove(boardroom, _amount);\\n        IBoardroom(boardroom).allocateSeigniorage(_amount);\\n        if (regulationStats != address(0)) IRegulationStats(regulationStats).addEpochInfo(epoch.add(1), previousEpochTokenPrice, _amount,\\n            _amount, _daoFundSharedAmount, _devFundSharedAmount, _insuranceFundSharedAmount);\\n        emit BoardroomFunded(now, _amount);\\n    }\\n\\n    function _calculateMaxSupplyExpansionPercent(uint256 _tokenSupply) internal returns (uint256) {\\n        for (uint8 tierId = 8; tierId >= 0; --tierId) {\\n            if (_tokenSupply >= supplyTiers[tierId]) {\\n                maxSupplyExpansionPercent = maxExpansionTiers[tierId];\\n                break;\\n            }\\n        }\\n        return maxSupplyExpansionPercent;\\n    }\\n\\n    function allocateSeigniorage() external onlyOneBlock checkCondition checkEpoch checkOperator {\\n        _updateTokenPrice();\\n        previousEpochTokenPrice = getTokenPrice();\\n        uint256 tokenSupply = getTokenCirculatingSupply().sub(seigniorageSaved);\\n        if (epoch < bootstrapEpochs) {\\n            // 28 first epochs with 4.5% expansion\\n            _sendToBoardroom(tokenSupply.mul(bootstrapSupplyExpansionPercent).div(10000));\\n            emit Seigniorage(epoch, previousEpochTokenPrice, tokenSupply.mul(bootstrapSupplyExpansionPercent).div(10000));\\n        } else {\\n            if (previousEpochTokenPrice > tokenPriceCeiling) {\\n                // Expansion ($BOMB Price > 1 $ETH): there is some seigniorage to be allocated\\n                uint256 bondSupply = IERC20(bond).totalSupply();\\n                uint256 _percentage = previousEpochTokenPrice.sub(tokenPriceOne);\\n                uint256 _savedForBond;\\n                uint256 _savedForBoardroom;\\n                uint256 _mse = _calculateMaxSupplyExpansionPercent(tokenSupply).mul(1e14);\\n                if (_percentage > _mse) {\\n                    _percentage = _mse;\\n                }\\n                if (seigniorageSaved >= bondSupply.mul(bondDepletionFloorPercent).div(10000)) {\\n                    // saved enough to pay debt, mint as usual rate\\n                    _savedForBoardroom = tokenSupply.mul(_percentage).div(1e18);\\n                } else {\\n                    // have not saved enough to pay debt, mint more\\n                    uint256 _seigniorage = tokenSupply.mul(_percentage).div(1e18);\\n                    _savedForBoardroom = _seigniorage.mul(seigniorageExpansionFloorPercent).div(10000);\\n                    _savedForBond = _seigniorage.sub(_savedForBoardroom);\\n                    if (mintingFactorForPayingDebt > 0) {\\n                        _savedForBond = _savedForBond.mul(mintingFactorForPayingDebt).div(10000);\\n                    }\\n                }\\n                if (_savedForBoardroom > 0) {\\n                    _sendToBoardroom(_savedForBoardroom);\\n                }\\n                if (_savedForBond > 0) {\\n                    seigniorageSaved = seigniorageSaved.add(_savedForBond);\\n                    IBasisAsset(token).mint(address(this), _savedForBond);\\n                    emit TreasuryFunded(now, _savedForBond);\\n                }\\n            }\\n        }\\n    }\\n\\n    function governanceRecoverUnsupported(\\n        IERC20 _token,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyOperator {\\n        // do not allow to drain core tokens\\n        require(address(_token) != address(token), \\\"token\\\");\\n        require(address(_token) != address(bond), \\\"bond\\\");\\n        require(address(_token) != address(share), \\\"share\\\");\\n        _token.safeTransfer(_to, _amount);\\n    }\\n\\n    function boardroomSetOperator(address _operator) external onlyOperator {\\n        IBoardroom(boardroom).setOperator(_operator);\\n    }\\n\\n    function boardroomSetLockUp(uint256 _withdrawLockupEpochs, uint256 _rewardLockupEpochs) external onlyOperator {\\n        IBoardroom(boardroom).setLockUp(_withdrawLockupEpochs, _rewardLockupEpochs);\\n    }\\n\\n    function boardroomSetReserveFund(address _reserveFund) external onlyOperator {\\n        IBoardroom(boardroom).setReserveFund(_reserveFund);\\n    }\\n\\n    function boardroomAllocateSeigniorage(uint256 amount) external onlyOperator {\\n        IBoardroom(boardroom).allocateSeigniorage(amount);\\n    }\\n\\n    function boardroomGovernanceRecoverUnsupported(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyOperator {\\n        IBoardroom(boardroom).governanceRecoverUnsupported(_token, _amount, _to);\\n    }\\n}\\n\",\"keccak256\":\"0x2a8276a8407ee21418502ed6e333be58c0b163d8cf82b15736bb7687a282287c\",\"license\":\"MIT\"},\"contracts/interfaces/IBasisAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\ninterface IBasisAsset {\\n    function mint(address recipient, uint256 amount) external returns (bool);\\n\\n    function burn(uint256 amount) external;\\n\\n    function burnFrom(address from, uint256 amount) external;\\n\\n    function isOperator() external returns (bool);\\n\\n    function operator() external view returns (address);\\n\\n    function transferOperator(address newOperator_) external;\\n}\\n\",\"keccak256\":\"0xd7a0645a5d2c8a0204f2c536388b034e9fa3b725283c36ebc38c0282627ae4ba\",\"license\":\"MIT\"},\"contracts/interfaces/IBoardroom.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IBoardroom {\\n    function balanceOf(address _member) external view returns (uint256);\\n\\n    function earned(address _member) external view returns (uint256);\\n\\n    function canWithdraw(address _member) external view returns (bool);\\n\\n    function canClaimReward(address _member) external view returns (bool);\\n\\n    function epoch() external view returns (uint256);\\n\\n    function nextEpochPoint() external view returns (uint256);\\n\\n    function getTokenPrice() external view returns (uint256);\\n\\n    function setOperator(address _operator) external;\\n\\n    function setReserveFund(address _reserveFund) external;\\n\\n    function setStakeFee(uint256 _stakeFee) external;\\n\\n    function setWithdrawFee(uint256 _withdrawFee) external;\\n\\n    function setLockUp(uint256 _withdrawLockupEpochs, uint256 _rewardLockupEpochs) external;\\n\\n    function stake(uint256 _amount) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function exit() external;\\n\\n    function claimReward() external;\\n\\n    function allocateSeigniorage(uint256 _amount) external;\\n\\n    function governanceRecoverUnsupported(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc6549dc9a8402ab81818543677132f7f9705b25ddf276807831ab2384c8288e4\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IOracle {\\n    function update() external;\\n\\n    function consult(address _token, uint256 _amountIn) external view returns (uint144 amountOut);\\n\\n    function twap(address _token, uint256 _amountIn) external view returns (uint144 _amountOut);\\n}\\n\",\"keccak256\":\"0xfe915dcf8502dacae92ed455f5e9e3c5cc159a7ad809f11b333de493c98828d3\",\"license\":\"MIT\"},\"contracts/interfaces/IRegulationStats.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IRegulationStats {\\n    function addEpochInfo(\\n        uint256 epochNumber,\\n        uint256 twap,\\n        uint256 expanded,\\n        uint256 boardroomFunding,\\n        uint256 daoFunding,\\n        uint256 marketingFunding,\\n        uint256 insuranceFunding\\n    ) external;\\n\\n    function addBonded(uint256 epochNumber, uint256 added) external;\\n\\n    function addRedeemed(uint256 epochNumber, uint256 added) external;\\n}\\n\",\"keccak256\":\"0xc8a4f7e6dac85af45702fd584ce07ef3d56902e37a9f61a2f18c24288fe10aa1\",\"license\":\"MIT\"},\"contracts/lib/Babylonian.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nlibrary Babylonian {\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n        // else z = 0\\n    }\\n}\\n\",\"keccak256\":\"0x3ee5b5170fa8ccf39d30a1980b470fb21b3a1cefe47921d98a1a5ebd85ff7d2f\",\"license\":\"MIT\"},\"contracts/owner/Operator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Operator is Context, Ownable {\\n    address private _operator;\\n\\n    event OperatorTransferred(address indexed previousOperator, address indexed newOperator);\\n\\n    constructor() internal {\\n        _operator = _msgSender();\\n        emit OperatorTransferred(address(0), _operator);\\n    }\\n\\n    function operator() public view returns (address) {\\n        return _operator;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(_operator == msg.sender, \\\"operator: caller is not the operator\\\");\\n        _;\\n    }\\n\\n    function isOperator() public view returns (bool) {\\n        return _msgSender() == _operator;\\n    }\\n\\n    function transferOperator(address newOperator_) public onlyOwner {\\n        _transferOperator(newOperator_);\\n    }\\n\\n    function _transferOperator(address newOperator_) internal {\\n        require(newOperator_ != address(0), \\\"operator: zero address given for new operator\\\");\\n        emit OperatorTransferred(address(0), newOperator_);\\n        _operator = newOperator_;\\n    }\\n}\\n\",\"keccak256\":\"0x1ae1bc52c72e3ad2fc80f7863e454f2bff37b902fa1ad639859681369e9b82db\",\"license\":\"MIT\"},\"contracts/utils/ContractGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ncontract ContractGuard {\\n    mapping(uint256 => mapping(address => bool)) private _status;\\n\\n    function checkSameOriginReentranted() internal view returns (bool) {\\n        return _status[block.number][tx.origin];\\n    }\\n\\n    function checkSameSenderReentranted() internal view returns (bool) {\\n        return _status[block.number][msg.sender];\\n    }\\n\\n    modifier onlyOneBlock() {\\n        require(!checkSameOriginReentranted(), \\\"ContractGuard: one block, one function\\\");\\n        require(!checkSameSenderReentranted(), \\\"ContractGuard: one block, one function\\\");\\n\\n        _;\\n\\n        _status[block.number][tx.origin] = true;\\n        _status[block.number][msg.sender] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x8e558ef5a039ce6ecd27eef794d31a136fd7b0e8c473bd86daa5baf7e8cf7a26\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6002805460ff60a01b191681556000600481905560055560c060405273bc0bc07a7e05b9a11a8e504fc29eb49d084454756080908152736e6bb04f91c928fbdc7f036462b0474107d86ef160a0526200005c916006919062000075565b503480156200006a57600080fd5b506001805562000100565b828054828255906000526020600020908101928215620000cd579160200282015b82811115620000cd57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000096565b50620000db929150620000df565b5090565b5b80821115620000db5780546001600160a01b0319168155600101620000e0565b614c4080620001106000396000f3fe608060405234801561001057600080fd5b506004361061048a5760003560e01c806381d11eaf11610262578063b4d1d79511610151578063d98f2495116100ce578063f4f102c111610092578063f4f102c114610a93578063f77c9fd814610a9b578063f8cd4d7214610aa3578063fc0c546a14610ac6578063fcb6f00814610ace578063feaa798f14610ad65761048a565b8063d98f249514610a56578063da3ed41914610a5e578063e388ac1014610a66578063e90b245414610a83578063f14698de14610a8b5761048a565b8063c8f987f311610115578063c8f987f3146109fb578063cecce38e14610a03578063d1ce75d414610a20578063d4b1494414610a28578063d70613d614610a4e5761048a565b8063b4d1d795146109d3578063b7902303146109db578063b8a878f9146109e3578063c5967c26146109eb578063c8412d02146109f35761048a565b806396a6ba20116101df578063a3ec30fe116101a3578063a3ec30fe14610923578063a8d5fd6514610959578063b06ce14a14610961578063b3ab15fb14610987578063b3ffc777146109ad5761048a565b806396a6ba201461088957806398b762a1146108af57806399820025146108cc578063a0487eea146108e9578063a204452b146109065761048a565b80638d934f74116102265780638d934f74146107e4578063900cf0cf146107ec57806391bbfed5146107f4578063940e60641461081757806395b6ef0c1461083d5761048a565b806381d11eaf1461079257806382cad8381461079a578063860c3177146107b7578063874106cc146107bf5780638c664db6146107c75761048a565b8063392e53cd1161037e578063570ca735116102fb5780635e02c51e116102bf5780635e02c51e1461076a57806364c9ec6f146107725780636c5ec25c1461077a57806372c054f91461078257806378e979251461078a5761048a565b8063570ca7351461072d578063591663e11461073557806359bf5d39146107525780635a0fc79c1461075a5780635b756179146107625761048a565b8063499f3f1911610342578063499f3f19146106a75780634b94f50e146106c457806354575af4146106cc57806354f04a111461070257806355ebdeef146107255761048a565b8063392e53cd146106305780634013a08e1461063857806340af7ba514610640578063419484f41461065d5780634390d2a8146106835761048a565b8063154ec2db1161040c57806326f45c6c116103d057806326f45c6c146105f3578063273f7b46146105fb57806329ef1919146106035780632e9c7b651461060b578063305ae216146106135761048a565b8063154ec2db1461054d578063158ef93e1461056a5780631b0fb35f146105865780631eda563a146105ce57806322f832cd146105eb5761048a565b80630b5bcec7116104535780630b5bcec7146104f55780630cf60175146105125780630db7eb0b1461051a5780630ef590a614610522578063118ebbf91461052a5761048a565b80620321041461048f57806301a93783146104a957806303be7e76146104c857806304e5c7b1146104d05780630595b47c146104ed575b600080fd5b610497610afc565b60408051918252519081900360200190f35b6104c6600480360360208110156104bf57600080fd5b5035610bd7565b005b610497610c88565b6104c6600480360360208110156104e657600080fd5b5035610c8e565b610497610d1c565b6104c66004803603602081101561050b57600080fd5b5035610e64565b610497610f00565b610497610fb2565b610497611054565b6104c66004803603604081101561054057600080fd5b508035906020013561105a565b6104c66004803603602081101561056357600080fd5b50356116b6565b61057261175b565b604080519115158252519081900360200190f35b6104c6600480360360c081101561059c57600080fd5b506001600160a01b03813581169160208101359160408201358116916060810135916080820135169060a0013561176b565b6104c6600480360360208110156105e457600080fd5b50356119a1565b610497611a88565b610497611a8e565b610497611b95565b610497611b9b565b610497611ba1565b6104c66004803603602081101561062957600080fd5b5035611ba7565b610572611c61565b610497611c71565b6104c66004803603602081101561065657600080fd5b5035611c77565b6104c66004803603602081101561067357600080fd5b50356001600160a01b0316611d1c565b61068b611d87565b604080516001600160a01b039092168252519081900360200190f35b6104c6600480360360208110156106bd57600080fd5b5035611d96565b610497611e33565b6104c6600480360360608110156106e257600080fd5b506001600160a01b03813581169160208101359160409091013516611e95565b6104c66004803603604081101561071857600080fd5b5080359060200135611fd9565b610497612717565b61068b61271d565b6104c66004803603602081101561074b57600080fd5b503561272c565b6104976127ce565b6104976127d4565b6104c66127da565b61068b612e69565b61068b612e78565b61068b612e87565b610497612e96565b610497612f4e565b610497612f54565b61068b600480360360208110156107b057600080fd5b5035612f5a565b610497612f81565b610497612f87565b6104c6600480360360208110156107dd57600080fd5b5035612f8d565b61068b61302f565b61049761303e565b6104c66004803603604081101561080a57600080fd5b5080359060200135613044565b6105726004803603604081101561082d57600080fd5b5060ff813516906020013561313c565b6104c6600480360360c081101561085357600080fd5b506001600160a01b0381358116916020810135821691604082013581169160608101358216916080820135169060a00135613258565b6104c66004803603602081101561089f57600080fd5b50356001600160a01b03166134f4565b6104c6600480360360208110156108c557600080fd5b503561355f565b610497600480360360208110156108e257600080fd5b50356135ad565b610497600480360360208110156108ff57600080fd5b50356135cb565b6104c66004803603602081101561091c57600080fd5b50356135d8565b6104c66004803603606081101561093957600080fd5b506001600160a01b03813581169160208101359160409091013516613626565b61068b6136e9565b6104c66004803603602081101561097757600080fd5b50356001600160a01b03166136f8565b6104c66004803603602081101561099d57600080fd5b50356001600160a01b031661378f565b6104c6600480360360208110156109c357600080fd5b50356001600160a01b03166137fa565b610497613865565b61068b61386b565b61049761387a565b610497613880565b6104976138aa565b6104976138b0565b6104c660048036036020811015610a1957600080fd5b50356138b6565b610497613957565b61057260048036036040811015610a3e57600080fd5b5060ff813516906020013561395d565b61068b613a57565b610497613a66565b610497613a6c565b6104c660048036036020811015610a7c57600080fd5b5035613a72565b610497613b63565b610497613b69565b610497613b6f565b610497613b75565b6104c660048036036040811015610ab957600080fd5b5080359060200135613b7b565b61068b613c34565b610497613c43565b6104c660048036036020811015610aec57600080fd5b50356001600160a01b0316613c49565b600b5460075460408051630d01142560e31b81526001600160a01b039283166004820152670de0b6b3a7640000602482015290516000939290921691636808a12891604480820192602092909190829003018186803b158015610b5e57600080fd5b505afa925050508015610b8357506040513d6020811015610b7e57600080fd5b505160015b610bbe5760405162461bcd60e51b815260040180806020018281038252603681526020018061496b6036913960400191505060405180910390fd5b71ffffffffffffffffffffffffffffffffffff16905090565b6002546001600160a01b03163314610c205760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b600a54604080516397ffe1d760e01b81526004810184905290516001600160a01b03909216916397ffe1d79160248082019260009290919082900301818387803b158015610c6d57600080fd5b505af1158015610c81573d6000803e3d6000fd5b5050505050565b60245481565b6002546001600160a01b03163314610cd75760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b6096811115610d175760405162461bcd60e51b81526004018080602001828103825260248152602001806149cf6024913960400191505060405180910390fd5b601e55565b600754604080516318160ddd60e01b815290516000926001600160a01b031691839183916318160ddd916004808301926020929190829003018186803b158015610d6557600080fd5b505afa158015610d79573d6000803e3d6000fd5b505050506040513d6020811015610d8f57600080fd5b505190506000805b60065460ff82161015610e5157610e47846001600160a01b03166370a0823160068460ff1681548110610dc657fe5b60009182526020918290200154604080516001600160e01b031960e086901b1681526001600160a01b0390921660048301525160248083019392829003018186803b158015610e1457600080fd5b505afa158015610e28573d6000803e3d6000fd5b505050506040513d6020811015610e3e57600080fd5b50518390613ce0565b9150600101610d97565b50610e5c8282613d41565b935050505090565b6002546001600160a01b03163314610ead5760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b600a8110158015610ec057506103e88111155b610efb5760405162461bcd60e51b8152600401808060200182810382526028815260200180614ab86028913960400191505060405180910390fd5b601355565b600080610f0b611e33565b9050600e548111610fae57601d54610f2757600e549150610fae565b6000610f5082610f4a670de0b6b3a7640000600e54613d9e90919063ffffffff16565b90613df7565b90506000610f7b612710610f4a601d54610f75600e5487613d4190919063ffffffff16565b90613d9e565b600e54909150610f8b9082613ce0565b93506000601b54118015610fa05750601b5484115b15610fab57601b5493505b50505b5090565b600080610fbd611e33565b9050600f54811115610fae576000610fe76064610f4a601e54600e54613d9e90919063ffffffff16565b9050808210611049576000611013612710610f4a601f54610f75600e5488613d4190919063ffffffff16565b600e549091506110239082613ce0565b93506000601c541180156110385750601c5484115b1561104357601c5493505b5061104f565b600e5492505b505090565b600f5481565b611062613e5e565b1561109e5760405162461bcd60e51b8152600401808060200182810382526026815260200180614b576026913960400191505060405180910390fd5b6110a6613e7d565b156110e25760405162461bcd60e51b8152600401808060200182810382526026815260200180614b576026913960400191505060405180910390fd5b600354421015611135576040805162461bcd60e51b8152602060048201526019602482015278151c99585cdd5c9e4e881b9bdd081cdd185c9d1959081e595d603a1b604482015290519081900360640190fd5b6007546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b15801561117957600080fd5b505afa15801561118d573d6000803e3d6000fd5b505050506040513d60208110156111a357600080fd5b50516001600160a01b031614801561123157506008546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b1580156111fa57600080fd5b505afa15801561120e573d6000803e3d6000fd5b505050506040513d602081101561122457600080fd5b50516001600160a01b0316145b80156112b35750600a546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b15801561127c57600080fd5b505afa158015611290573d6000803e3d6000fd5b505050506040513d60208110156112a657600080fd5b50516001600160a01b0316145b611304576040805162461bcd60e51b815260206004820152601e60248201527f54726561737572793a206e656564206d6f7265207065726d697373696f6e0000604482015290519081900360640190fd5b600082116113435760405162461bcd60e51b815260040180806020018281038252602e8152602001806149a1602e913960400191505060405180910390fd5b600061134d611e33565b90508181146113a3576040805162461bcd60e51b815260206004820152601a60248201527f54726561737572793a20424f4d42207072696365206d6f766564000000000000604482015290519081900360640190fd5b600f5481116113e35760405162461bcd60e51b81526004018080602001828103825260338152602001806149386033913960400191505060405180910390fd5b60006113ed610fb2565b905060008111611444576040805162461bcd60e51b815260206004820152601b60248201527f54726561737572793a20696e76616c696420626f6e6420726174650000000000604482015290519081900360640190fd5b600061145c670de0b6b3a7640000610f4a8785613d9e565b600754604080516370a0823160e01b8152306004820152905192935083926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156114ac57600080fd5b505afa1580156114c0573d6000803e3d6000fd5b505050506040513d60208110156114d657600080fd5b505110156115155760405162461bcd60e51b8152600401808060200182810382526025815260200180614a196025913960400191505060405180910390fd5b61152d61152460105483613e9c565b60105490613d41565b6010556008546040805163079cc67960e41b81523360048201526024810188905290516001600160a01b03909216916379cc67909160448082019260009290919082900301818387803b15801561158357600080fd5b505af1158015611597573d6000803e3d6000fd5b50506007546115b392506001600160a01b031690503383613eb2565b6115bb613f04565b6027546001600160a01b03161561163c576027546004805460408051635a78027560e01b81529283019190915260248201849052516001600160a01b0390921691635a7802759160448082019260009290919082900301818387803b15801561162357600080fd5b505af1158015611637573d6000803e3d6000fd5b505050505b6040805182815260208101879052815133927f51e0d16595cabc591e64da08e45bb223577e5b9a39cd947b4ddc3472b2dd8878928290030190a25050436000908152602081815260408083203284529091528082208054600160ff1991821681179092553384529190922080549091169091179055505050565b6002546001600160a01b031633146116ff5760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b614e20811115611756576040805162461bcd60e51b815260206004820152601d60248201527f5f646973636f756e7450657263656e74206973206f7665722032303025000000604482015290519081900360640190fd5b601d55565b600254600160a01b900460ff1681565b6002546001600160a01b031633146117b45760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b6001600160a01b0386166117f8576040805162461bcd60e51b815260206004808301919091526024820152637a65726f60e01b604482015290519081900360640190fd5b61138885111561183e576040805162461bcd60e51b815260206004820152600c60248201526b6f7574206f662072616e676560a01b604482015290519081900360640190fd5b6001600160a01b038416611882576040805162461bcd60e51b815260206004808301919091526024820152637a65726f60e01b604482015290519081900360640190fd5b6103e88311156118c8576040805162461bcd60e51b815260206004820152600c60248201526b6f7574206f662072616e676560a01b604482015290519081900360640190fd5b6001600160a01b03821661190c576040805162461bcd60e51b815260206004808301919091526024820152637a65726f60e01b604482015290519081900360640190fd5b6103e8811115611952576040805162461bcd60e51b815260206004820152600c60248201526b6f7574206f662072616e676560a01b604482015290519081900360640190fd5b602180546001600160a01b03199081166001600160a01b039889161790915560229590955560238054861694871694909417909355602491909155602580549093169316929092179055602655565b6002546001600160a01b031633146119ea5760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b6005811115611a36576040805162461bcd60e51b81526020600482015260136024820152724d6178207374616b652066656520697320352560681b604482015290519081900360640190fd5b600d819055600a54604080516338b5efb960e21b81526004810184905290516001600160a01b039092169163e2d7bee49160248082019260009290919082900301818387803b158015610c6d57600080fd5b60155481565b600080611a99611e33565b9050600e548111610fae576000611aae610d1c565b90506000611acd612710610f4a60175485613d9e90919063ffffffff16565b90506000600860009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611b1f57600080fd5b505afa158015611b33573d6000803e3d6000fd5b505050506040513d6020811015611b4957600080fd5b5051905080821115611b8e576000611b618383613d41565b90506000611b7b670de0b6b3a7640000610f4a8489613d9e565b9050611b8960055482613e9c565b965050505b5050505090565b601a5481565b601d5481565b601c5481565b6002546001600160a01b03163314611bf05760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b600e548110158015611c1c5750611c186064610f4a6078600e54613d9e90919063ffffffff16565b8111155b611c5c576040805162461bcd60e51b815260206004820152600c60248201526b6f7574206f662072616e676560a01b604482015290519081900360640190fd5b600f55565b600254600160a01b900460ff1690565b60205481565b6002546001600160a01b03163314611cc05760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b614e20811115611d17576040805162461bcd60e51b815260206004820152601c60248201527f5f7072656d69756d50657263656e74206973206f766572203230302500000000604482015290519081900360640190fd5b601f55565b6002546001600160a01b03163314611d655760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b602780546001600160a01b0319166001600160a01b0392909216919091179055565b6023546001600160a01b031681565b6002546001600160a01b03163314611ddf5760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b6127108110158015611df35750614e208111155b611e2e5760405162461bcd60e51b8152600401808060200182810382526029815260200180614a8f6029913960400191505060405180910390fd5b602055565b600b5460075460408051633ddac95360e01b81526001600160a01b039283166004820152670de0b6b3a7640000602482015290516000939290921691633ddac95391604480820192602092909190829003018186803b158015610b5e57600080fd5b6002546001600160a01b03163314611ede5760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b6007546001600160a01b0384811691161415611f29576040805162461bcd60e51b81526020600482015260056024820152643a37b5b2b760d91b604482015290519081900360640190fd5b6008546001600160a01b0384811691161415611f75576040805162461bcd60e51b81526020600480830191909152602482015263189bdb9960e21b604482015290519081900360640190fd5b6009546001600160a01b0384811691161415611fc0576040805162461bcd60e51b8152602060048201526005602482015264736861726560d81b604482015290519081900360640190fd5b611fd46001600160a01b0384168284613eb2565b505050565b611fe1613e5e565b1561201d5760405162461bcd60e51b8152600401808060200182810382526026815260200180614b576026913960400191505060405180910390fd5b612025613e7d565b156120615760405162461bcd60e51b8152600401808060200182810382526026815260200180614b576026913960400191505060405180910390fd5b6003544210156120b4576040805162461bcd60e51b8152602060048201526019602482015278151c99585cdd5c9e4e881b9bdd081cdd185c9d1959081e595d603a1b604482015290519081900360640190fd5b6007546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b1580156120f857600080fd5b505afa15801561210c573d6000803e3d6000fd5b505050506040513d602081101561212257600080fd5b50516001600160a01b03161480156121b057506008546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b15801561217957600080fd5b505afa15801561218d573d6000803e3d6000fd5b505050506040513d60208110156121a357600080fd5b50516001600160a01b0316145b80156122325750600a546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b1580156121fb57600080fd5b505afa15801561220f573d6000803e3d6000fd5b505050506040513d602081101561222557600080fd5b50516001600160a01b0316145b612283576040805162461bcd60e51b815260206004820152601e60248201527f54726561737572793a206e656564206d6f7265207065726d697373696f6e0000604482015290519081900360640190fd5b600082116122c25760405162461bcd60e51b8152600401808060200182810382526030815260200180614a5f6030913960400191505060405180910390fd5b60006122cc611e33565b9050818114612322576040805162461bcd60e51b815260206004820152601a60248201527f54726561737572793a20424f4d42207072696365206d6f766564000000000000604482015290519081900360640190fd5b600e5481106123625760405162461bcd60e51b81526004018080602001828103825260338152602001806149386033913960400191505060405180910390fd5b6005548311156123a35760405162461bcd60e51b815260040180806020018281038252602a815260200180614bb3602a913960400191505060405180910390fd5b60006123ad610f00565b905060008111612404576040805162461bcd60e51b815260206004820152601b60248201527f54726561737572793a20696e76616c696420626f6e6420726174650000000000604482015290519081900360640190fd5b600061241c670de0b6b3a7640000610f4a8785613d9e565b90506000612428610d1c565b905060006124b083600860009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561247e57600080fd5b505afa158015612492573d6000803e3d6000fd5b505050506040513d60208110156124a857600080fd5b505190613ce0565b90506124cd612710610f4a60175485613d9e90919063ffffffff16565b811115612517576040805162461bcd60e51b81526020600482015260136024820152726f766572206d6178206465627420726174696f60681b604482015290519081900360640190fd5b6007546040805163079cc67960e41b8152336004820152602481018a905290516001600160a01b03909216916379cc67909160448082019260009290919082900301818387803b15801561256a57600080fd5b505af115801561257e573d6000803e3d6000fd5b5050600854604080516340c10f1960e01b81523360048201526024810188905290516001600160a01b0390921693506340c10f1992506044808201926020929091908290030181600087803b1580156125d657600080fd5b505af11580156125ea573d6000803e3d6000fd5b505050506040513d602081101561260057600080fd5b505060055461260f9088613d41565b60055561261a613f04565b6027546001600160a01b03161561269b5760275460048054604080516368a3fd3160e01b81529283019190915260248201869052516001600160a01b03909216916368a3fd319160448082019260009290919082900301818387803b15801561268257600080fd5b505af1158015612696573d6000803e3d6000fd5b505050505b6040805188815260208101859052815133927f73017f1b70789e2e66759eeb3c7ec11f59e6eedb55d921cfaec5410dd42a4799928290030190a25050436000908152602081815260408083203284529091528082208054600160ff19918216811790925533845291909220805490911690911790555050505050565b60225481565b6002546001600160a01b031681565b6002546001600160a01b031633146127755760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b6103e8811015801561278957506127108111155b6127c9576040805162461bcd60e51b815260206004820152600c60248201526b6f7574206f662072616e676560a01b604482015290519081900360640190fd5b601755565b60105490565b60105481565b6127e2613e5e565b1561281e5760405162461bcd60e51b8152600401808060200182810382526026815260200180614b576026913960400191505060405180910390fd5b612826613e7d565b156128625760405162461bcd60e51b8152600401808060200182810382526026815260200180614b576026913960400191505060405180910390fd5b6003544210156128b5576040805162461bcd60e51b8152602060048201526019602482015278151c99585cdd5c9e4e881b9bdd081cdd185c9d1959081e595d603a1b604482015290519081900360640190fd5b6128bd613880565b421015612911576040805162461bcd60e51b815260206004820152601860248201527f54726561737572793a206e6f74206f70656e6564207965740000000000000000604482015290519081900360640190fd5b6007546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b15801561295557600080fd5b505afa158015612969573d6000803e3d6000fd5b505050506040513d602081101561297f57600080fd5b50516001600160a01b0316148015612a0d57506008546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b1580156129d657600080fd5b505afa1580156129ea573d6000803e3d6000fd5b505050506040513d6020811015612a0057600080fd5b50516001600160a01b0316145b8015612a8f5750600a546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b158015612a5857600080fd5b505afa158015612a6c573d6000803e3d6000fd5b505050506040513d6020811015612a8257600080fd5b50516001600160a01b0316145b612ae0576040805162461bcd60e51b815260206004820152601e60248201527f54726561737572793a206e656564206d6f7265207065726d697373696f6e0000604482015290519081900360640190fd5b612ae8613f04565b612af0611e33565b601a55601054600090612b0b90612b05610d1c565b90613d41565b90506018546004541015612ba057612b3c612b37612710610f4a60195485613d9e90919063ffffffff16565b613f68565b7f94a896583ef35ce156f07410cc5a289d003c9a2200539d5282f2557769becb4a600454601a54612b7e612710610f4a60195487613d9e90919063ffffffff16565b60408051938452602084019290925282820152519081900360600190a1612ded565b600f54601a541115612ded57600854604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b158015612bf157600080fd5b505afa158015612c05573d6000803e3d6000fd5b505050506040513d6020811015612c1b57600080fd5b5051600e54601a54919250600091612c3291613d41565b90506000806000612c4c655af3107a4000610f758861444e565b905080841115612c5a578093505b612c75612710610f4a60145488613d9e90919063ffffffff16565b60105410612c9a57612c93670de0b6b3a7640000610f4a8887613d9e565b9150612d06565b6000612cb2670de0b6b3a7640000610f4a8988613d9e565b9050612ccf612710610f4a60155484613d9e90919063ffffffff16565b9250612cdb8184613d41565b60205490945015612d0457612d01612710610f4a60205487613d9e90919063ffffffff16565b93505b505b8115612d1557612d1582613f68565b8215612de757601054612d289084613ce0565b601055600754604080516340c10f1960e01b81523060048201526024810186905290516001600160a01b03909216916340c10f19916044808201926020929091908290030181600087803b158015612d7f57600080fd5b505af1158015612d93573d6000803e3d6000fd5b505050506040513d6020811015612da957600080fd5b5050604080514281526020810185905281517ff705142bf09f04297640495ddf7c59b7fd6f51894c5aea9602d631cf05f0efc2929181900390910190a15b50505050505b50600454612dfc906001613ce0565b600455600f54612e0a611e33565b11612e2857612e23612710610f4a601654610f75610d1c565b612e2b565b60005b600555436000908152602081815260408083203284529091528082208054600160ff1991821681179092553384529190922080549091169091179055565b600a546001600160a01b031681565b6008546001600160a01b031681565b600b546001600160a01b031681565b600080612ea1611e33565b9050600f54811115610fae57600754604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015612ef857600080fd5b505afa158015612f0c573d6000803e3d6000fd5b505050506040513d6020811015612f2257600080fd5b505190506000612f30610fb2565b90508015610fab57610e5c81610f4a84670de0b6b3a7640000613d9e565b60035481565b60145481565b60068181548110612f6757fe5b6000918252602090912001546001600160a01b0316905081565b60265481565b60195481565b6002546001600160a01b03163314612fd65760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b6101f48110158015612fea57506127108111155b61302a576040805162461bcd60e51b815260206004820152600c60248201526b6f7574206f662072616e676560a01b604482015290519081900360640190fd5b601455565b6021546001600160a01b031681565b60045481565b6002546001600160a01b0316331461308d5760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b60788211156130e3576040805162461bcd60e51b815260206004820152601e60248201527f5f626f6f74737472617045706f6368733a206f7574206f662072616e67650000604482015290519081900360640190fd5b606481101580156130f657506103e88111155b6131315760405162461bcd60e51b815260040180806020018281038252602e815260200180614bdd602e913960400191505060405180910390fd5b601891909155601955565b6002546000906001600160a01b031633146131885760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b60098360ff16106131ca5760405162461bcd60e51b8152600401808060200182810382526029815260200180614ae06029913960400191505060405180910390fd5b60ff8316156131fc5760116001840360ff16815481106131e657fe5b906000526020600020015482116131fc57600080fd5b60088360ff1610156132315760118360010160ff168154811061321b57fe5b9060005260206000200154821061323157600080fd5b8160118460ff168154811061324257fe5b6000918252602090912001555060015b92915050565b600254600160a01b900460ff16156132b7576040805162461bcd60e51b815260206004820152601d60248201527f54726561737572793a20616c726561647920696e697469616c697a6564000000604482015290519081900360640190fd5b600780546001600160a01b03199081166001600160a01b0389811691909117909255600880548216888416179055600980548216878416179055600b80548216868416179055600a80549091169184169190911790556003819055670de0b6b3a7640000600e819055613334906103e890610f4a906103e9613d9e565b600f556040805160c0810182526000815269152d02c7e14af680000060208201526934f086f3b33b68400000918101919091526969e10de76676d0800000606082015269d3c21bcecceda100000060808201526a0422ca8b0a00a42500000060a08201526133a690601190600661488c565b506040805160c081018252609680825260208201819052918101829052606081018290526080810182905260a08101919091526133e79060129060066148e2565b5061015e6013819055612710601455610dac601581815561012c6016556017919091556069601e55611b58601f55601855601955600754604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561346657600080fd5b505afa15801561347a573d6000803e3d6000fd5b505050506040513d602081101561349057600080fd5b5051601055600280546001600160a01b031960ff60a01b19909116600160a01b1716339081179091556040805143815290517f25ff68dd81b34665b5ba7e553ee5511bf6812e12adb4a7e2c0d9e26b3099ce799181900360200190a2505050505050565b6002546001600160a01b0316331461353d5760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b031633146135a85760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b601b55565b601181815481106135ba57fe5b600091825260209091200154905081565b601281815481106135ba57fe5b6002546001600160a01b031633146136215760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b601c55565b6002546001600160a01b0316331461366f5760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b600a5460408051631515d6bd60e21b81526001600160a01b038681166004830152602482018690528481166044830152915191909216916354575af491606480830192600092919082900301818387803b1580156136cc57600080fd5b505af11580156136e0573d6000803e3d6000fd5b50505050505050565b6009546001600160a01b031681565b6002546001600160a01b031633146137415760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b600a546040805163b3ab15fb60e01b81526001600160a01b0384811660048301529151919092169163b3ab15fb91602480830192600092919082900301818387803b158015610c6d57600080fd5b6002546001600160a01b031633146137d85760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b031633146138435760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b61708081565b6025546001600160a01b031681565b601b5481565b60006138a561389c617080600454613d9e90919063ffffffff16565b60035490613ce0565b905090565b601f5481565b601e5481565b6002546001600160a01b031633146138ff5760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b6064811015801561391257506105dc8111155b613952576040805162461bcd60e51b815260206004820152600c60248201526b6f7574206f662072616e676560a01b604482015290519081900360640190fd5b601655565b600c5481565b6002546000906001600160a01b031633146139a95760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b60098360ff16106139eb5760405162461bcd60e51b8152600401808060200182810382526029815260200180614ae06029913960400191505060405180910390fd5b600a82101580156139fe57506103e88211155b613a46576040805162461bcd60e51b81526020600482015260146024820152735f76616c75653a206f7574206f662072616e676560601b604482015290519081900360640190fd5b8160128460ff168154811061324257fe5b6027546001600160a01b031681565b60135481565b60175481565b6002546001600160a01b03163314613abb5760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b6014811115613b11576040805162461bcd60e51b815260206004820152601760248201527f4d61782077697468647261772066656520697320323025000000000000000000604482015290519081900360640190fd5b600c819055600a5460408051635b56321560e11b81526004810184905290516001600160a01b039092169163b6ac642a9160248082019260009290919082900301818387803b158015610c6d57600080fd5b60165481565b60185481565b600d5481565b600e5481565b6002546001600160a01b03163314613bc45760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b600a5460408051632ffaaa0960e01b8152600481018590526024810184905290516001600160a01b0390921691632ffaaa099160448082019260009290919082900301818387803b158015613c1857600080fd5b505af1158015613c2c573d6000803e3d6000fd5b505050505050565b6007546001600160a01b031681565b60055481565b6002546001600160a01b03163314613c925760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b600a5460408051637a4c6c5360e11b81526001600160a01b0384811660048301529151919092169163f498d8a691602480830192600092919082900301818387803b158015610c6d57600080fd5b600082820183811015613d3a576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b600082821115613d98576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600082613dad57506000613252565b82820282848281613dba57fe5b0414613d3a5760405162461bcd60e51b8152600401808060200182810382526021815260200180614a3e6021913960400191505060405180910390fd5b6000808211613e4d576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381613e5657fe5b049392505050565b4360009081526020818152604080832032845290915290205460ff1690565b4360009081526020818152604080832033845290915290205460ff1690565b6000818310613eab5781613d3a565b5090919050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611fd49084906144ab565b600b60009054906101000a90046001600160a01b03166001600160a01b031663a2e620456040518163ffffffff1660e01b8152600401600060405180830381600087803b158015613f5457600080fd5b505af1925050508015613f65575060015b50565b600754604080516340c10f1960e01b81523060048201526024810184905290516001600160a01b03909216916340c10f19916044808201926020929091908290030181600087803b158015613fbc57600080fd5b505af1158015613fd0573d6000803e3d6000fd5b505050506040513d6020811015613fe657600080fd5b5050602254600090156140d15761400e612710610f4a60225485613d9e90919063ffffffff16565b6007546021546040805163a9059cbb60e01b81526001600160a01b03928316600482015260248101859052905193945091169163a9059cbb916044808201926020929091908290030181600087803b15801561406957600080fd5b505af115801561407d573d6000803e3d6000fd5b505050506040513d602081101561409357600080fd5b5050604080514281526020810183905281517fcb3f34aaa3445b461e6da5492dc89e5c257a59fa598131f3b6bbc97a3638e409929181900390910190a15b602454600090156141ba576140f7612710610f4a60245486613d9e90919063ffffffff16565b6007546023546040805163a9059cbb60e01b81526001600160a01b03928316600482015260248101859052905193945091169163a9059cbb916044808201926020929091908290030181600087803b15801561415257600080fd5b505af1158015614166573d6000803e3d6000fd5b505050506040513d602081101561417c57600080fd5b5050604080514281526020810183905281517fdc8b715b18523e58b7fd0da53259dfa91efd91df4a854d94b136e3333a3b9395929181900390910190a15b602654600090156142a3576141e0612710610f4a60265487613d9e90919063ffffffff16565b6007546025546040805163a9059cbb60e01b81526001600160a01b03928316600482015260248101859052905193945091169163a9059cbb916044808201926020929091908290030181600087803b15801561423b57600080fd5b505af115801561424f573d6000803e3d6000fd5b505050506040513d602081101561426557600080fd5b5050604080514281526020810183905281517f3cdb297d43aaa0da840fd0a1f52eadd12f655a7a0002fb2eab8cf8172febc42c929181900390910190a15b6142b381612b0584818888613d41565b600a546007549195506142d4916001600160a01b039081169116600061455c565b600a546007546142f1916001600160a01b0391821691168661455c565b600a54604080516397ffe1d760e01b81526004810187905290516001600160a01b03909216916397ffe1d79160248082019260009290919082900301818387803b15801561433e57600080fd5b505af1158015614352573d6000803e3d6000fd5b50506027546001600160a01b031615915061440d9050576027546004546001600160a01b039091169063723985169061438c906001613ce0565b601a5487888888886040518863ffffffff1660e01b815260040180888152602001878152602001868152602001858152602001848152602001838152602001828152602001975050505050505050600060405180830381600087803b1580156143f457600080fd5b505af1158015614408573d6000803e3d6000fd5b505050505b604080514281526020810186905281517f03ca7276ab7799bf73fb79d27ff0610cd7049574f2508ef8445162833d439aea929181900390910190a150505050565b600060085b60118160ff168154811061446357fe5b906000526020600020015483106144985760128160ff168154811061448457fe5b6000918252602090912001546013556144a1565b60001901614453565b5050601354919050565b6060614500826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661466f9092919063ffffffff16565b805190915015611fd45780806020019051602081101561451f57600080fd5b5051611fd45760405162461bcd60e51b815260040180806020018281038252602a815260200180614b2d602a913960400191505060405180910390fd5b8015806145e2575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b1580156145b457600080fd5b505afa1580156145c8573d6000803e3d6000fd5b505050506040513d60208110156145de57600080fd5b5051155b61461d5760405162461bcd60e51b8152600401808060200182810382526036815260200180614b7d6036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052611fd49084906144ab565b606061467e8484600085614686565b949350505050565b6060824710156146c75760405162461bcd60e51b81526004018080602001828103825260268152602001806149f36026913960400191505060405180910390fd5b6146d0856147e2565b614721576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106147605780518252601f199092019160209182019101614741565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146147c2576040519150601f19603f3d011682016040523d82523d6000602084013e6147c7565b606091505b50915091506147d78282866147e8565b979650505050505050565b3b151590565b606083156147f7575081613d3a565b8251156148075782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015614851578181015183820152602001614839565b50505050905090810190601f16801561487e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b8280548282559060005260206000209081019282156148d6579160200282015b828111156148d657825182906affffffffffffffffffffff169055916020019190600101906148ac565b50610fae929150614922565b8280548282559060005260206000209081019282156148d6579160200282015b828111156148d6578251829060ff16905591602001919060010190614902565b5b80821115610fae576000815560010161492356fe54726561737572793a20746f6b656e5072696365206e6f7420656c696769626c6520666f7220626f6e6420707572636861736554726561737572793a206661696c656420746f20636f6e73756c7420424f4d422070726963652066726f6d20746865206f7261636c6554726561737572793a2063616e6e6f742072656465656d20626f6e64732077697468207a65726f20616d6f756e745f7072656d69756d5468726573686f6c6420697320686967686572207468616e20312e35416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c54726561737572793a20747265617375727920686173206e6f206d6f726520627564676574536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7754726561737572793a2063616e6e6f7420707572636861736520626f6e64732077697468207a65726f20616d6f756e745f6d696e74696e67466163746f72466f72506179696e67446562743a206f7574206f662072616e67655f6d6178537570706c79457870616e73696f6e50657263656e743a206f7574206f662072616e6765496e6465782068617320746f206265206c6f776572207468616e20636f756e74206f6620746965727354726561737572793a2063616c6c6572206973206e6f7420746865206f70657261746f725361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564436f6e747261637447756172643a206f6e6520626c6f636b2c206f6e652066756e6374696f6e5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e636554726561737572793a206e6f7420656e6f75676820626f6e64206c65667420746f2070757263686173655f626f6f747374726170537570706c79457870616e73696f6e50657263656e743a206f7574206f662072616e6765a2646970667358221220ebd8c08a695971d4e43778c8fcadfffe99b6f2650dba5b595910098ac7b0391d64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061048a5760003560e01c806381d11eaf11610262578063b4d1d79511610151578063d98f2495116100ce578063f4f102c111610092578063f4f102c114610a93578063f77c9fd814610a9b578063f8cd4d7214610aa3578063fc0c546a14610ac6578063fcb6f00814610ace578063feaa798f14610ad65761048a565b8063d98f249514610a56578063da3ed41914610a5e578063e388ac1014610a66578063e90b245414610a83578063f14698de14610a8b5761048a565b8063c8f987f311610115578063c8f987f3146109fb578063cecce38e14610a03578063d1ce75d414610a20578063d4b1494414610a28578063d70613d614610a4e5761048a565b8063b4d1d795146109d3578063b7902303146109db578063b8a878f9146109e3578063c5967c26146109eb578063c8412d02146109f35761048a565b806396a6ba20116101df578063a3ec30fe116101a3578063a3ec30fe14610923578063a8d5fd6514610959578063b06ce14a14610961578063b3ab15fb14610987578063b3ffc777146109ad5761048a565b806396a6ba201461088957806398b762a1146108af57806399820025146108cc578063a0487eea146108e9578063a204452b146109065761048a565b80638d934f74116102265780638d934f74146107e4578063900cf0cf146107ec57806391bbfed5146107f4578063940e60641461081757806395b6ef0c1461083d5761048a565b806381d11eaf1461079257806382cad8381461079a578063860c3177146107b7578063874106cc146107bf5780638c664db6146107c75761048a565b8063392e53cd1161037e578063570ca735116102fb5780635e02c51e116102bf5780635e02c51e1461076a57806364c9ec6f146107725780636c5ec25c1461077a57806372c054f91461078257806378e979251461078a5761048a565b8063570ca7351461072d578063591663e11461073557806359bf5d39146107525780635a0fc79c1461075a5780635b756179146107625761048a565b8063499f3f1911610342578063499f3f19146106a75780634b94f50e146106c457806354575af4146106cc57806354f04a111461070257806355ebdeef146107255761048a565b8063392e53cd146106305780634013a08e1461063857806340af7ba514610640578063419484f41461065d5780634390d2a8146106835761048a565b8063154ec2db1161040c57806326f45c6c116103d057806326f45c6c146105f3578063273f7b46146105fb57806329ef1919146106035780632e9c7b651461060b578063305ae216146106135761048a565b8063154ec2db1461054d578063158ef93e1461056a5780631b0fb35f146105865780631eda563a146105ce57806322f832cd146105eb5761048a565b80630b5bcec7116104535780630b5bcec7146104f55780630cf60175146105125780630db7eb0b1461051a5780630ef590a614610522578063118ebbf91461052a5761048a565b80620321041461048f57806301a93783146104a957806303be7e76146104c857806304e5c7b1146104d05780630595b47c146104ed575b600080fd5b610497610afc565b60408051918252519081900360200190f35b6104c6600480360360208110156104bf57600080fd5b5035610bd7565b005b610497610c88565b6104c6600480360360208110156104e657600080fd5b5035610c8e565b610497610d1c565b6104c66004803603602081101561050b57600080fd5b5035610e64565b610497610f00565b610497610fb2565b610497611054565b6104c66004803603604081101561054057600080fd5b508035906020013561105a565b6104c66004803603602081101561056357600080fd5b50356116b6565b61057261175b565b604080519115158252519081900360200190f35b6104c6600480360360c081101561059c57600080fd5b506001600160a01b03813581169160208101359160408201358116916060810135916080820135169060a0013561176b565b6104c6600480360360208110156105e457600080fd5b50356119a1565b610497611a88565b610497611a8e565b610497611b95565b610497611b9b565b610497611ba1565b6104c66004803603602081101561062957600080fd5b5035611ba7565b610572611c61565b610497611c71565b6104c66004803603602081101561065657600080fd5b5035611c77565b6104c66004803603602081101561067357600080fd5b50356001600160a01b0316611d1c565b61068b611d87565b604080516001600160a01b039092168252519081900360200190f35b6104c6600480360360208110156106bd57600080fd5b5035611d96565b610497611e33565b6104c6600480360360608110156106e257600080fd5b506001600160a01b03813581169160208101359160409091013516611e95565b6104c66004803603604081101561071857600080fd5b5080359060200135611fd9565b610497612717565b61068b61271d565b6104c66004803603602081101561074b57600080fd5b503561272c565b6104976127ce565b6104976127d4565b6104c66127da565b61068b612e69565b61068b612e78565b61068b612e87565b610497612e96565b610497612f4e565b610497612f54565b61068b600480360360208110156107b057600080fd5b5035612f5a565b610497612f81565b610497612f87565b6104c6600480360360208110156107dd57600080fd5b5035612f8d565b61068b61302f565b61049761303e565b6104c66004803603604081101561080a57600080fd5b5080359060200135613044565b6105726004803603604081101561082d57600080fd5b5060ff813516906020013561313c565b6104c6600480360360c081101561085357600080fd5b506001600160a01b0381358116916020810135821691604082013581169160608101358216916080820135169060a00135613258565b6104c66004803603602081101561089f57600080fd5b50356001600160a01b03166134f4565b6104c6600480360360208110156108c557600080fd5b503561355f565b610497600480360360208110156108e257600080fd5b50356135ad565b610497600480360360208110156108ff57600080fd5b50356135cb565b6104c66004803603602081101561091c57600080fd5b50356135d8565b6104c66004803603606081101561093957600080fd5b506001600160a01b03813581169160208101359160409091013516613626565b61068b6136e9565b6104c66004803603602081101561097757600080fd5b50356001600160a01b03166136f8565b6104c66004803603602081101561099d57600080fd5b50356001600160a01b031661378f565b6104c6600480360360208110156109c357600080fd5b50356001600160a01b03166137fa565b610497613865565b61068b61386b565b61049761387a565b610497613880565b6104976138aa565b6104976138b0565b6104c660048036036020811015610a1957600080fd5b50356138b6565b610497613957565b61057260048036036040811015610a3e57600080fd5b5060ff813516906020013561395d565b61068b613a57565b610497613a66565b610497613a6c565b6104c660048036036020811015610a7c57600080fd5b5035613a72565b610497613b63565b610497613b69565b610497613b6f565b610497613b75565b6104c660048036036040811015610ab957600080fd5b5080359060200135613b7b565b61068b613c34565b610497613c43565b6104c660048036036020811015610aec57600080fd5b50356001600160a01b0316613c49565b600b5460075460408051630d01142560e31b81526001600160a01b039283166004820152670de0b6b3a7640000602482015290516000939290921691636808a12891604480820192602092909190829003018186803b158015610b5e57600080fd5b505afa925050508015610b8357506040513d6020811015610b7e57600080fd5b505160015b610bbe5760405162461bcd60e51b815260040180806020018281038252603681526020018061496b6036913960400191505060405180910390fd5b71ffffffffffffffffffffffffffffffffffff16905090565b6002546001600160a01b03163314610c205760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b600a54604080516397ffe1d760e01b81526004810184905290516001600160a01b03909216916397ffe1d79160248082019260009290919082900301818387803b158015610c6d57600080fd5b505af1158015610c81573d6000803e3d6000fd5b5050505050565b60245481565b6002546001600160a01b03163314610cd75760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b6096811115610d175760405162461bcd60e51b81526004018080602001828103825260248152602001806149cf6024913960400191505060405180910390fd5b601e55565b600754604080516318160ddd60e01b815290516000926001600160a01b031691839183916318160ddd916004808301926020929190829003018186803b158015610d6557600080fd5b505afa158015610d79573d6000803e3d6000fd5b505050506040513d6020811015610d8f57600080fd5b505190506000805b60065460ff82161015610e5157610e47846001600160a01b03166370a0823160068460ff1681548110610dc657fe5b60009182526020918290200154604080516001600160e01b031960e086901b1681526001600160a01b0390921660048301525160248083019392829003018186803b158015610e1457600080fd5b505afa158015610e28573d6000803e3d6000fd5b505050506040513d6020811015610e3e57600080fd5b50518390613ce0565b9150600101610d97565b50610e5c8282613d41565b935050505090565b6002546001600160a01b03163314610ead5760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b600a8110158015610ec057506103e88111155b610efb5760405162461bcd60e51b8152600401808060200182810382526028815260200180614ab86028913960400191505060405180910390fd5b601355565b600080610f0b611e33565b9050600e548111610fae57601d54610f2757600e549150610fae565b6000610f5082610f4a670de0b6b3a7640000600e54613d9e90919063ffffffff16565b90613df7565b90506000610f7b612710610f4a601d54610f75600e5487613d4190919063ffffffff16565b90613d9e565b600e54909150610f8b9082613ce0565b93506000601b54118015610fa05750601b5484115b15610fab57601b5493505b50505b5090565b600080610fbd611e33565b9050600f54811115610fae576000610fe76064610f4a601e54600e54613d9e90919063ffffffff16565b9050808210611049576000611013612710610f4a601f54610f75600e5488613d4190919063ffffffff16565b600e549091506110239082613ce0565b93506000601c541180156110385750601c5484115b1561104357601c5493505b5061104f565b600e5492505b505090565b600f5481565b611062613e5e565b1561109e5760405162461bcd60e51b8152600401808060200182810382526026815260200180614b576026913960400191505060405180910390fd5b6110a6613e7d565b156110e25760405162461bcd60e51b8152600401808060200182810382526026815260200180614b576026913960400191505060405180910390fd5b600354421015611135576040805162461bcd60e51b8152602060048201526019602482015278151c99585cdd5c9e4e881b9bdd081cdd185c9d1959081e595d603a1b604482015290519081900360640190fd5b6007546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b15801561117957600080fd5b505afa15801561118d573d6000803e3d6000fd5b505050506040513d60208110156111a357600080fd5b50516001600160a01b031614801561123157506008546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b1580156111fa57600080fd5b505afa15801561120e573d6000803e3d6000fd5b505050506040513d602081101561122457600080fd5b50516001600160a01b0316145b80156112b35750600a546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b15801561127c57600080fd5b505afa158015611290573d6000803e3d6000fd5b505050506040513d60208110156112a657600080fd5b50516001600160a01b0316145b611304576040805162461bcd60e51b815260206004820152601e60248201527f54726561737572793a206e656564206d6f7265207065726d697373696f6e0000604482015290519081900360640190fd5b600082116113435760405162461bcd60e51b815260040180806020018281038252602e8152602001806149a1602e913960400191505060405180910390fd5b600061134d611e33565b90508181146113a3576040805162461bcd60e51b815260206004820152601a60248201527f54726561737572793a20424f4d42207072696365206d6f766564000000000000604482015290519081900360640190fd5b600f5481116113e35760405162461bcd60e51b81526004018080602001828103825260338152602001806149386033913960400191505060405180910390fd5b60006113ed610fb2565b905060008111611444576040805162461bcd60e51b815260206004820152601b60248201527f54726561737572793a20696e76616c696420626f6e6420726174650000000000604482015290519081900360640190fd5b600061145c670de0b6b3a7640000610f4a8785613d9e565b600754604080516370a0823160e01b8152306004820152905192935083926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156114ac57600080fd5b505afa1580156114c0573d6000803e3d6000fd5b505050506040513d60208110156114d657600080fd5b505110156115155760405162461bcd60e51b8152600401808060200182810382526025815260200180614a196025913960400191505060405180910390fd5b61152d61152460105483613e9c565b60105490613d41565b6010556008546040805163079cc67960e41b81523360048201526024810188905290516001600160a01b03909216916379cc67909160448082019260009290919082900301818387803b15801561158357600080fd5b505af1158015611597573d6000803e3d6000fd5b50506007546115b392506001600160a01b031690503383613eb2565b6115bb613f04565b6027546001600160a01b03161561163c576027546004805460408051635a78027560e01b81529283019190915260248201849052516001600160a01b0390921691635a7802759160448082019260009290919082900301818387803b15801561162357600080fd5b505af1158015611637573d6000803e3d6000fd5b505050505b6040805182815260208101879052815133927f51e0d16595cabc591e64da08e45bb223577e5b9a39cd947b4ddc3472b2dd8878928290030190a25050436000908152602081815260408083203284529091528082208054600160ff1991821681179092553384529190922080549091169091179055505050565b6002546001600160a01b031633146116ff5760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b614e20811115611756576040805162461bcd60e51b815260206004820152601d60248201527f5f646973636f756e7450657263656e74206973206f7665722032303025000000604482015290519081900360640190fd5b601d55565b600254600160a01b900460ff1681565b6002546001600160a01b031633146117b45760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b6001600160a01b0386166117f8576040805162461bcd60e51b815260206004808301919091526024820152637a65726f60e01b604482015290519081900360640190fd5b61138885111561183e576040805162461bcd60e51b815260206004820152600c60248201526b6f7574206f662072616e676560a01b604482015290519081900360640190fd5b6001600160a01b038416611882576040805162461bcd60e51b815260206004808301919091526024820152637a65726f60e01b604482015290519081900360640190fd5b6103e88311156118c8576040805162461bcd60e51b815260206004820152600c60248201526b6f7574206f662072616e676560a01b604482015290519081900360640190fd5b6001600160a01b03821661190c576040805162461bcd60e51b815260206004808301919091526024820152637a65726f60e01b604482015290519081900360640190fd5b6103e8811115611952576040805162461bcd60e51b815260206004820152600c60248201526b6f7574206f662072616e676560a01b604482015290519081900360640190fd5b602180546001600160a01b03199081166001600160a01b039889161790915560229590955560238054861694871694909417909355602491909155602580549093169316929092179055602655565b6002546001600160a01b031633146119ea5760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b6005811115611a36576040805162461bcd60e51b81526020600482015260136024820152724d6178207374616b652066656520697320352560681b604482015290519081900360640190fd5b600d819055600a54604080516338b5efb960e21b81526004810184905290516001600160a01b039092169163e2d7bee49160248082019260009290919082900301818387803b158015610c6d57600080fd5b60155481565b600080611a99611e33565b9050600e548111610fae576000611aae610d1c565b90506000611acd612710610f4a60175485613d9e90919063ffffffff16565b90506000600860009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611b1f57600080fd5b505afa158015611b33573d6000803e3d6000fd5b505050506040513d6020811015611b4957600080fd5b5051905080821115611b8e576000611b618383613d41565b90506000611b7b670de0b6b3a7640000610f4a8489613d9e565b9050611b8960055482613e9c565b965050505b5050505090565b601a5481565b601d5481565b601c5481565b6002546001600160a01b03163314611bf05760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b600e548110158015611c1c5750611c186064610f4a6078600e54613d9e90919063ffffffff16565b8111155b611c5c576040805162461bcd60e51b815260206004820152600c60248201526b6f7574206f662072616e676560a01b604482015290519081900360640190fd5b600f55565b600254600160a01b900460ff1690565b60205481565b6002546001600160a01b03163314611cc05760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b614e20811115611d17576040805162461bcd60e51b815260206004820152601c60248201527f5f7072656d69756d50657263656e74206973206f766572203230302500000000604482015290519081900360640190fd5b601f55565b6002546001600160a01b03163314611d655760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b602780546001600160a01b0319166001600160a01b0392909216919091179055565b6023546001600160a01b031681565b6002546001600160a01b03163314611ddf5760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b6127108110158015611df35750614e208111155b611e2e5760405162461bcd60e51b8152600401808060200182810382526029815260200180614a8f6029913960400191505060405180910390fd5b602055565b600b5460075460408051633ddac95360e01b81526001600160a01b039283166004820152670de0b6b3a7640000602482015290516000939290921691633ddac95391604480820192602092909190829003018186803b158015610b5e57600080fd5b6002546001600160a01b03163314611ede5760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b6007546001600160a01b0384811691161415611f29576040805162461bcd60e51b81526020600482015260056024820152643a37b5b2b760d91b604482015290519081900360640190fd5b6008546001600160a01b0384811691161415611f75576040805162461bcd60e51b81526020600480830191909152602482015263189bdb9960e21b604482015290519081900360640190fd5b6009546001600160a01b0384811691161415611fc0576040805162461bcd60e51b8152602060048201526005602482015264736861726560d81b604482015290519081900360640190fd5b611fd46001600160a01b0384168284613eb2565b505050565b611fe1613e5e565b1561201d5760405162461bcd60e51b8152600401808060200182810382526026815260200180614b576026913960400191505060405180910390fd5b612025613e7d565b156120615760405162461bcd60e51b8152600401808060200182810382526026815260200180614b576026913960400191505060405180910390fd5b6003544210156120b4576040805162461bcd60e51b8152602060048201526019602482015278151c99585cdd5c9e4e881b9bdd081cdd185c9d1959081e595d603a1b604482015290519081900360640190fd5b6007546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b1580156120f857600080fd5b505afa15801561210c573d6000803e3d6000fd5b505050506040513d602081101561212257600080fd5b50516001600160a01b03161480156121b057506008546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b15801561217957600080fd5b505afa15801561218d573d6000803e3d6000fd5b505050506040513d60208110156121a357600080fd5b50516001600160a01b0316145b80156122325750600a546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b1580156121fb57600080fd5b505afa15801561220f573d6000803e3d6000fd5b505050506040513d602081101561222557600080fd5b50516001600160a01b0316145b612283576040805162461bcd60e51b815260206004820152601e60248201527f54726561737572793a206e656564206d6f7265207065726d697373696f6e0000604482015290519081900360640190fd5b600082116122c25760405162461bcd60e51b8152600401808060200182810382526030815260200180614a5f6030913960400191505060405180910390fd5b60006122cc611e33565b9050818114612322576040805162461bcd60e51b815260206004820152601a60248201527f54726561737572793a20424f4d42207072696365206d6f766564000000000000604482015290519081900360640190fd5b600e5481106123625760405162461bcd60e51b81526004018080602001828103825260338152602001806149386033913960400191505060405180910390fd5b6005548311156123a35760405162461bcd60e51b815260040180806020018281038252602a815260200180614bb3602a913960400191505060405180910390fd5b60006123ad610f00565b905060008111612404576040805162461bcd60e51b815260206004820152601b60248201527f54726561737572793a20696e76616c696420626f6e6420726174650000000000604482015290519081900360640190fd5b600061241c670de0b6b3a7640000610f4a8785613d9e565b90506000612428610d1c565b905060006124b083600860009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561247e57600080fd5b505afa158015612492573d6000803e3d6000fd5b505050506040513d60208110156124a857600080fd5b505190613ce0565b90506124cd612710610f4a60175485613d9e90919063ffffffff16565b811115612517576040805162461bcd60e51b81526020600482015260136024820152726f766572206d6178206465627420726174696f60681b604482015290519081900360640190fd5b6007546040805163079cc67960e41b8152336004820152602481018a905290516001600160a01b03909216916379cc67909160448082019260009290919082900301818387803b15801561256a57600080fd5b505af115801561257e573d6000803e3d6000fd5b5050600854604080516340c10f1960e01b81523360048201526024810188905290516001600160a01b0390921693506340c10f1992506044808201926020929091908290030181600087803b1580156125d657600080fd5b505af11580156125ea573d6000803e3d6000fd5b505050506040513d602081101561260057600080fd5b505060055461260f9088613d41565b60055561261a613f04565b6027546001600160a01b03161561269b5760275460048054604080516368a3fd3160e01b81529283019190915260248201869052516001600160a01b03909216916368a3fd319160448082019260009290919082900301818387803b15801561268257600080fd5b505af1158015612696573d6000803e3d6000fd5b505050505b6040805188815260208101859052815133927f73017f1b70789e2e66759eeb3c7ec11f59e6eedb55d921cfaec5410dd42a4799928290030190a25050436000908152602081815260408083203284529091528082208054600160ff19918216811790925533845291909220805490911690911790555050505050565b60225481565b6002546001600160a01b031681565b6002546001600160a01b031633146127755760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b6103e8811015801561278957506127108111155b6127c9576040805162461bcd60e51b815260206004820152600c60248201526b6f7574206f662072616e676560a01b604482015290519081900360640190fd5b601755565b60105490565b60105481565b6127e2613e5e565b1561281e5760405162461bcd60e51b8152600401808060200182810382526026815260200180614b576026913960400191505060405180910390fd5b612826613e7d565b156128625760405162461bcd60e51b8152600401808060200182810382526026815260200180614b576026913960400191505060405180910390fd5b6003544210156128b5576040805162461bcd60e51b8152602060048201526019602482015278151c99585cdd5c9e4e881b9bdd081cdd185c9d1959081e595d603a1b604482015290519081900360640190fd5b6128bd613880565b421015612911576040805162461bcd60e51b815260206004820152601860248201527f54726561737572793a206e6f74206f70656e6564207965740000000000000000604482015290519081900360640190fd5b6007546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b15801561295557600080fd5b505afa158015612969573d6000803e3d6000fd5b505050506040513d602081101561297f57600080fd5b50516001600160a01b0316148015612a0d57506008546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b1580156129d657600080fd5b505afa1580156129ea573d6000803e3d6000fd5b505050506040513d6020811015612a0057600080fd5b50516001600160a01b0316145b8015612a8f5750600a546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b158015612a5857600080fd5b505afa158015612a6c573d6000803e3d6000fd5b505050506040513d6020811015612a8257600080fd5b50516001600160a01b0316145b612ae0576040805162461bcd60e51b815260206004820152601e60248201527f54726561737572793a206e656564206d6f7265207065726d697373696f6e0000604482015290519081900360640190fd5b612ae8613f04565b612af0611e33565b601a55601054600090612b0b90612b05610d1c565b90613d41565b90506018546004541015612ba057612b3c612b37612710610f4a60195485613d9e90919063ffffffff16565b613f68565b7f94a896583ef35ce156f07410cc5a289d003c9a2200539d5282f2557769becb4a600454601a54612b7e612710610f4a60195487613d9e90919063ffffffff16565b60408051938452602084019290925282820152519081900360600190a1612ded565b600f54601a541115612ded57600854604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b158015612bf157600080fd5b505afa158015612c05573d6000803e3d6000fd5b505050506040513d6020811015612c1b57600080fd5b5051600e54601a54919250600091612c3291613d41565b90506000806000612c4c655af3107a4000610f758861444e565b905080841115612c5a578093505b612c75612710610f4a60145488613d9e90919063ffffffff16565b60105410612c9a57612c93670de0b6b3a7640000610f4a8887613d9e565b9150612d06565b6000612cb2670de0b6b3a7640000610f4a8988613d9e565b9050612ccf612710610f4a60155484613d9e90919063ffffffff16565b9250612cdb8184613d41565b60205490945015612d0457612d01612710610f4a60205487613d9e90919063ffffffff16565b93505b505b8115612d1557612d1582613f68565b8215612de757601054612d289084613ce0565b601055600754604080516340c10f1960e01b81523060048201526024810186905290516001600160a01b03909216916340c10f19916044808201926020929091908290030181600087803b158015612d7f57600080fd5b505af1158015612d93573d6000803e3d6000fd5b505050506040513d6020811015612da957600080fd5b5050604080514281526020810185905281517ff705142bf09f04297640495ddf7c59b7fd6f51894c5aea9602d631cf05f0efc2929181900390910190a15b50505050505b50600454612dfc906001613ce0565b600455600f54612e0a611e33565b11612e2857612e23612710610f4a601654610f75610d1c565b612e2b565b60005b600555436000908152602081815260408083203284529091528082208054600160ff1991821681179092553384529190922080549091169091179055565b600a546001600160a01b031681565b6008546001600160a01b031681565b600b546001600160a01b031681565b600080612ea1611e33565b9050600f54811115610fae57600754604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015612ef857600080fd5b505afa158015612f0c573d6000803e3d6000fd5b505050506040513d6020811015612f2257600080fd5b505190506000612f30610fb2565b90508015610fab57610e5c81610f4a84670de0b6b3a7640000613d9e565b60035481565b60145481565b60068181548110612f6757fe5b6000918252602090912001546001600160a01b0316905081565b60265481565b60195481565b6002546001600160a01b03163314612fd65760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b6101f48110158015612fea57506127108111155b61302a576040805162461bcd60e51b815260206004820152600c60248201526b6f7574206f662072616e676560a01b604482015290519081900360640190fd5b601455565b6021546001600160a01b031681565b60045481565b6002546001600160a01b0316331461308d5760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b60788211156130e3576040805162461bcd60e51b815260206004820152601e60248201527f5f626f6f74737472617045706f6368733a206f7574206f662072616e67650000604482015290519081900360640190fd5b606481101580156130f657506103e88111155b6131315760405162461bcd60e51b815260040180806020018281038252602e815260200180614bdd602e913960400191505060405180910390fd5b601891909155601955565b6002546000906001600160a01b031633146131885760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b60098360ff16106131ca5760405162461bcd60e51b8152600401808060200182810382526029815260200180614ae06029913960400191505060405180910390fd5b60ff8316156131fc5760116001840360ff16815481106131e657fe5b906000526020600020015482116131fc57600080fd5b60088360ff1610156132315760118360010160ff168154811061321b57fe5b9060005260206000200154821061323157600080fd5b8160118460ff168154811061324257fe5b6000918252602090912001555060015b92915050565b600254600160a01b900460ff16156132b7576040805162461bcd60e51b815260206004820152601d60248201527f54726561737572793a20616c726561647920696e697469616c697a6564000000604482015290519081900360640190fd5b600780546001600160a01b03199081166001600160a01b0389811691909117909255600880548216888416179055600980548216878416179055600b80548216868416179055600a80549091169184169190911790556003819055670de0b6b3a7640000600e819055613334906103e890610f4a906103e9613d9e565b600f556040805160c0810182526000815269152d02c7e14af680000060208201526934f086f3b33b68400000918101919091526969e10de76676d0800000606082015269d3c21bcecceda100000060808201526a0422ca8b0a00a42500000060a08201526133a690601190600661488c565b506040805160c081018252609680825260208201819052918101829052606081018290526080810182905260a08101919091526133e79060129060066148e2565b5061015e6013819055612710601455610dac601581815561012c6016556017919091556069601e55611b58601f55601855601955600754604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561346657600080fd5b505afa15801561347a573d6000803e3d6000fd5b505050506040513d602081101561349057600080fd5b5051601055600280546001600160a01b031960ff60a01b19909116600160a01b1716339081179091556040805143815290517f25ff68dd81b34665b5ba7e553ee5511bf6812e12adb4a7e2c0d9e26b3099ce799181900360200190a2505050505050565b6002546001600160a01b0316331461353d5760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b031633146135a85760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b601b55565b601181815481106135ba57fe5b600091825260209091200154905081565b601281815481106135ba57fe5b6002546001600160a01b031633146136215760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b601c55565b6002546001600160a01b0316331461366f5760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b600a5460408051631515d6bd60e21b81526001600160a01b038681166004830152602482018690528481166044830152915191909216916354575af491606480830192600092919082900301818387803b1580156136cc57600080fd5b505af11580156136e0573d6000803e3d6000fd5b50505050505050565b6009546001600160a01b031681565b6002546001600160a01b031633146137415760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b600a546040805163b3ab15fb60e01b81526001600160a01b0384811660048301529151919092169163b3ab15fb91602480830192600092919082900301818387803b158015610c6d57600080fd5b6002546001600160a01b031633146137d85760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b031633146138435760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b61708081565b6025546001600160a01b031681565b601b5481565b60006138a561389c617080600454613d9e90919063ffffffff16565b60035490613ce0565b905090565b601f5481565b601e5481565b6002546001600160a01b031633146138ff5760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b6064811015801561391257506105dc8111155b613952576040805162461bcd60e51b815260206004820152600c60248201526b6f7574206f662072616e676560a01b604482015290519081900360640190fd5b601655565b600c5481565b6002546000906001600160a01b031633146139a95760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b60098360ff16106139eb5760405162461bcd60e51b8152600401808060200182810382526029815260200180614ae06029913960400191505060405180910390fd5b600a82101580156139fe57506103e88211155b613a46576040805162461bcd60e51b81526020600482015260146024820152735f76616c75653a206f7574206f662072616e676560601b604482015290519081900360640190fd5b8160128460ff168154811061324257fe5b6027546001600160a01b031681565b60135481565b60175481565b6002546001600160a01b03163314613abb5760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b6014811115613b11576040805162461bcd60e51b815260206004820152601760248201527f4d61782077697468647261772066656520697320323025000000000000000000604482015290519081900360640190fd5b600c819055600a5460408051635b56321560e11b81526004810184905290516001600160a01b039092169163b6ac642a9160248082019260009290919082900301818387803b158015610c6d57600080fd5b60165481565b60185481565b600d5481565b600e5481565b6002546001600160a01b03163314613bc45760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b600a5460408051632ffaaa0960e01b8152600481018590526024810184905290516001600160a01b0390921691632ffaaa099160448082019260009290919082900301818387803b158015613c1857600080fd5b505af1158015613c2c573d6000803e3d6000fd5b505050505050565b6007546001600160a01b031681565b60055481565b6002546001600160a01b03163314613c925760405162461bcd60e51b8152600401808060200182810382526024815260200180614b096024913960400191505060405180910390fd5b600a5460408051637a4c6c5360e11b81526001600160a01b0384811660048301529151919092169163f498d8a691602480830192600092919082900301818387803b158015610c6d57600080fd5b600082820183811015613d3a576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b600082821115613d98576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600082613dad57506000613252565b82820282848281613dba57fe5b0414613d3a5760405162461bcd60e51b8152600401808060200182810382526021815260200180614a3e6021913960400191505060405180910390fd5b6000808211613e4d576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381613e5657fe5b049392505050565b4360009081526020818152604080832032845290915290205460ff1690565b4360009081526020818152604080832033845290915290205460ff1690565b6000818310613eab5781613d3a565b5090919050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611fd49084906144ab565b600b60009054906101000a90046001600160a01b03166001600160a01b031663a2e620456040518163ffffffff1660e01b8152600401600060405180830381600087803b158015613f5457600080fd5b505af1925050508015613f65575060015b50565b600754604080516340c10f1960e01b81523060048201526024810184905290516001600160a01b03909216916340c10f19916044808201926020929091908290030181600087803b158015613fbc57600080fd5b505af1158015613fd0573d6000803e3d6000fd5b505050506040513d6020811015613fe657600080fd5b5050602254600090156140d15761400e612710610f4a60225485613d9e90919063ffffffff16565b6007546021546040805163a9059cbb60e01b81526001600160a01b03928316600482015260248101859052905193945091169163a9059cbb916044808201926020929091908290030181600087803b15801561406957600080fd5b505af115801561407d573d6000803e3d6000fd5b505050506040513d602081101561409357600080fd5b5050604080514281526020810183905281517fcb3f34aaa3445b461e6da5492dc89e5c257a59fa598131f3b6bbc97a3638e409929181900390910190a15b602454600090156141ba576140f7612710610f4a60245486613d9e90919063ffffffff16565b6007546023546040805163a9059cbb60e01b81526001600160a01b03928316600482015260248101859052905193945091169163a9059cbb916044808201926020929091908290030181600087803b15801561415257600080fd5b505af1158015614166573d6000803e3d6000fd5b505050506040513d602081101561417c57600080fd5b5050604080514281526020810183905281517fdc8b715b18523e58b7fd0da53259dfa91efd91df4a854d94b136e3333a3b9395929181900390910190a15b602654600090156142a3576141e0612710610f4a60265487613d9e90919063ffffffff16565b6007546025546040805163a9059cbb60e01b81526001600160a01b03928316600482015260248101859052905193945091169163a9059cbb916044808201926020929091908290030181600087803b15801561423b57600080fd5b505af115801561424f573d6000803e3d6000fd5b505050506040513d602081101561426557600080fd5b5050604080514281526020810183905281517f3cdb297d43aaa0da840fd0a1f52eadd12f655a7a0002fb2eab8cf8172febc42c929181900390910190a15b6142b381612b0584818888613d41565b600a546007549195506142d4916001600160a01b039081169116600061455c565b600a546007546142f1916001600160a01b0391821691168661455c565b600a54604080516397ffe1d760e01b81526004810187905290516001600160a01b03909216916397ffe1d79160248082019260009290919082900301818387803b15801561433e57600080fd5b505af1158015614352573d6000803e3d6000fd5b50506027546001600160a01b031615915061440d9050576027546004546001600160a01b039091169063723985169061438c906001613ce0565b601a5487888888886040518863ffffffff1660e01b815260040180888152602001878152602001868152602001858152602001848152602001838152602001828152602001975050505050505050600060405180830381600087803b1580156143f457600080fd5b505af1158015614408573d6000803e3d6000fd5b505050505b604080514281526020810186905281517f03ca7276ab7799bf73fb79d27ff0610cd7049574f2508ef8445162833d439aea929181900390910190a150505050565b600060085b60118160ff168154811061446357fe5b906000526020600020015483106144985760128160ff168154811061448457fe5b6000918252602090912001546013556144a1565b60001901614453565b5050601354919050565b6060614500826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661466f9092919063ffffffff16565b805190915015611fd45780806020019051602081101561451f57600080fd5b5051611fd45760405162461bcd60e51b815260040180806020018281038252602a815260200180614b2d602a913960400191505060405180910390fd5b8015806145e2575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b1580156145b457600080fd5b505afa1580156145c8573d6000803e3d6000fd5b505050506040513d60208110156145de57600080fd5b5051155b61461d5760405162461bcd60e51b8152600401808060200182810382526036815260200180614b7d6036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052611fd49084906144ab565b606061467e8484600085614686565b949350505050565b6060824710156146c75760405162461bcd60e51b81526004018080602001828103825260268152602001806149f36026913960400191505060405180910390fd5b6146d0856147e2565b614721576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106147605780518252601f199092019160209182019101614741565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146147c2576040519150601f19603f3d011682016040523d82523d6000602084013e6147c7565b606091505b50915091506147d78282866147e8565b979650505050505050565b3b151590565b606083156147f7575081613d3a565b8251156148075782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015614851578181015183820152602001614839565b50505050905090810190601f16801561487e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b8280548282559060005260206000209081019282156148d6579160200282015b828111156148d657825182906affffffffffffffffffffff169055916020019190600101906148ac565b50610fae929150614922565b8280548282559060005260206000209081019282156148d6579160200282015b828111156148d6578251829060ff16905591602001919060010190614902565b5b80821115610fae576000815560010161492356fe54726561737572793a20746f6b656e5072696365206e6f7420656c696769626c6520666f7220626f6e6420707572636861736554726561737572793a206661696c656420746f20636f6e73756c7420424f4d422070726963652066726f6d20746865206f7261636c6554726561737572793a2063616e6e6f742072656465656d20626f6e64732077697468207a65726f20616d6f756e745f7072656d69756d5468726573686f6c6420697320686967686572207468616e20312e35416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c54726561737572793a20747265617375727920686173206e6f206d6f726520627564676574536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7754726561737572793a2063616e6e6f7420707572636861736520626f6e64732077697468207a65726f20616d6f756e745f6d696e74696e67466163746f72466f72506179696e67446562743a206f7574206f662072616e67655f6d6178537570706c79457870616e73696f6e50657263656e743a206f7574206f662072616e6765496e6465782068617320746f206265206c6f776572207468616e20636f756e74206f6620746965727354726561737572793a2063616c6c6572206973206e6f7420746865206f70657261746f725361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564436f6e747261637447756172643a206f6e6520626c6f636b2c206f6e652066756e6374696f6e5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e636554726561737572793a206e6f7420656e6f75676820626f6e64206c65667420746f2070757263686173655f626f6f747374726170537570706c79457870616e73696f6e50657263656e743a206f7574206f662072616e6765a2646970667358221220ebd8c08a695971d4e43778c8fcadfffe99b6f2650dba5b595910098ac7b0391d64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 18793,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1973,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 8366,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "operator",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 8369,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "initialized",
        "offset": 20,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 8371,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "startTime",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 8374,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "epoch",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 8377,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "epochSupplyContractionLeft",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 8389,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "excludedFromTotalSupply",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 8391,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "token",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 8393,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "bond",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 8395,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "share",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 8397,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "boardroom",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 8399,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "tokenOracle",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 8401,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "boardroomWithdrawFee",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 8403,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "boardroomStakeFee",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 8405,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "tokenPriceOne",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 8407,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "tokenPriceCeiling",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 8409,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "seigniorageSaved",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 8412,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "supplyTiers",
        "offset": 0,
        "slot": "17",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 8415,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "maxExpansionTiers",
        "offset": 0,
        "slot": "18",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 8417,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "maxSupplyExpansionPercent",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 8419,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "bondDepletionFloorPercent",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 8421,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "seigniorageExpansionFloorPercent",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 8423,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "maxSupplyContractionPercent",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 8425,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "maxDebtRatioPercent",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 8427,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "bootstrapEpochs",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 8429,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "bootstrapSupplyExpansionPercent",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 8431,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "previousEpochTokenPrice",
        "offset": 0,
        "slot": "26",
        "type": "t_uint256"
      },
      {
        "astId": 8433,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "maxDiscountRate",
        "offset": 0,
        "slot": "27",
        "type": "t_uint256"
      },
      {
        "astId": 8435,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "maxPremiumRate",
        "offset": 0,
        "slot": "28",
        "type": "t_uint256"
      },
      {
        "astId": 8437,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "discountPercent",
        "offset": 0,
        "slot": "29",
        "type": "t_uint256"
      },
      {
        "astId": 8439,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "premiumThreshold",
        "offset": 0,
        "slot": "30",
        "type": "t_uint256"
      },
      {
        "astId": 8441,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "premiumPercent",
        "offset": 0,
        "slot": "31",
        "type": "t_uint256"
      },
      {
        "astId": 8443,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "mintingFactorForPayingDebt",
        "offset": 0,
        "slot": "32",
        "type": "t_uint256"
      },
      {
        "astId": 8445,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "daoFund",
        "offset": 0,
        "slot": "33",
        "type": "t_address"
      },
      {
        "astId": 8447,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "daoFundSharedPercent",
        "offset": 0,
        "slot": "34",
        "type": "t_uint256"
      },
      {
        "astId": 8449,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "devFund",
        "offset": 0,
        "slot": "35",
        "type": "t_address"
      },
      {
        "astId": 8451,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "devFundSharedPercent",
        "offset": 0,
        "slot": "36",
        "type": "t_uint256"
      },
      {
        "astId": 8453,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "insuranceFund",
        "offset": 0,
        "slot": "37",
        "type": "t_address"
      },
      {
        "astId": 8455,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "insuranceFundSharedPercent",
        "offset": 0,
        "slot": "38",
        "type": "t_uint256"
      },
      {
        "astId": 8457,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "regulationStats",
        "offset": 0,
        "slot": "39",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface StatsEMPInterface extends utils.Interface {
  functions: {
    "addBonded(uint256,uint256)": FunctionFragment;
    "addEpochInfo(uint256,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "addRedeemed(uint256,uint256)": FunctionFragment;
    "epochInfo(uint256)": FunctionFragment;
    "getCurrentEpoch()": FunctionFragment;
    "getEpochInfo(uint256,uint256)": FunctionFragment;
    "getNextEpochPoint()": FunctionFragment;
    "governanceRecoverUnsupported(address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setTreasury(address)": FunctionFragment;
    "totalBoardroomFunding()": FunctionFragment;
    "totalDaoFunding()": FunctionFragment;
    "totalDevFunding()": FunctionFragment;
    "totalInsuranceFunding()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasury()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addBonded",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addEpochInfo",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addRedeemed",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "epochInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextEpochPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governanceRecoverUnsupported",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setTreasury", values: [string]): string;
  encodeFunctionData(
    functionFragment: "totalBoardroomFunding",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDaoFunding",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDevFunding",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalInsuranceFunding",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addBonded", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addEpochInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRedeemed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "epochInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEpochInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextEpochPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceRecoverUnsupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBoardroomFunding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDaoFunding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDevFunding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalInsuranceFunding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface StatsEMP extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StatsEMPInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addBonded(
      epochNumber: BigNumberish,
      added: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addEpochInfo(
      epochNumber: BigNumberish,
      twap: BigNumberish,
      expanded: BigNumberish,
      boardroomFunding: BigNumberish,
      daoFunding: BigNumberish,
      devFunding: BigNumberish,
      insuranceFunding: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addRedeemed(
      epochNumber: BigNumberish,
      added: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    epochInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        twap: BigNumber;
        expanded: BigNumber;
        bonded: BigNumber;
        redeemed: BigNumber;
      }
    >;

    getCurrentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEpochInfo(
      _start: BigNumberish,
      _numEpochs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { results: BigNumber[] }>;

    getNextEpochPoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    governanceRecoverUnsupported(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalBoardroomFunding(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalDaoFunding(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalDevFunding(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalInsuranceFunding(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;
  };

  addBonded(
    epochNumber: BigNumberish,
    added: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addEpochInfo(
    epochNumber: BigNumberish,
    twap: BigNumberish,
    expanded: BigNumberish,
    boardroomFunding: BigNumberish,
    daoFunding: BigNumberish,
    devFunding: BigNumberish,
    insuranceFunding: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addRedeemed(
    epochNumber: BigNumberish,
    added: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  epochInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      twap: BigNumber;
      expanded: BigNumber;
      bonded: BigNumber;
      redeemed: BigNumber;
    }
  >;

  getCurrentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  getEpochInfo(
    _start: BigNumberish,
    _numEpochs: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getNextEpochPoint(overrides?: CallOverrides): Promise<BigNumber>;

  governanceRecoverUnsupported(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _treasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasury(
    _treasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalBoardroomFunding(overrides?: CallOverrides): Promise<BigNumber>;

  totalDaoFunding(overrides?: CallOverrides): Promise<BigNumber>;

  totalDevFunding(overrides?: CallOverrides): Promise<BigNumber>;

  totalInsuranceFunding(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addBonded(
      epochNumber: BigNumberish,
      added: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addEpochInfo(
      epochNumber: BigNumberish,
      twap: BigNumberish,
      expanded: BigNumberish,
      boardroomFunding: BigNumberish,
      daoFunding: BigNumberish,
      devFunding: BigNumberish,
      insuranceFunding: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addRedeemed(
      epochNumber: BigNumberish,
      added: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    epochInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        twap: BigNumber;
        expanded: BigNumber;
        bonded: BigNumber;
        redeemed: BigNumber;
      }
    >;

    getCurrentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    getEpochInfo(
      _start: BigNumberish,
      _numEpochs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getNextEpochPoint(overrides?: CallOverrides): Promise<BigNumber>;

    governanceRecoverUnsupported(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(_treasury: string, overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setTreasury(_treasury: string, overrides?: CallOverrides): Promise<void>;

    totalBoardroomFunding(overrides?: CallOverrides): Promise<BigNumber>;

    totalDaoFunding(overrides?: CallOverrides): Promise<BigNumber>;

    totalDevFunding(overrides?: CallOverrides): Promise<BigNumber>;

    totalInsuranceFunding(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    addBonded(
      epochNumber: BigNumberish,
      added: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addEpochInfo(
      epochNumber: BigNumberish,
      twap: BigNumberish,
      expanded: BigNumberish,
      boardroomFunding: BigNumberish,
      daoFunding: BigNumberish,
      devFunding: BigNumberish,
      insuranceFunding: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addRedeemed(
      epochNumber: BigNumberish,
      added: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    epochInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    getEpochInfo(
      _start: BigNumberish,
      _numEpochs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextEpochPoint(overrides?: CallOverrides): Promise<BigNumber>;

    governanceRecoverUnsupported(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalBoardroomFunding(overrides?: CallOverrides): Promise<BigNumber>;

    totalDaoFunding(overrides?: CallOverrides): Promise<BigNumber>;

    totalDevFunding(overrides?: CallOverrides): Promise<BigNumber>;

    totalInsuranceFunding(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addBonded(
      epochNumber: BigNumberish,
      added: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addEpochInfo(
      epochNumber: BigNumberish,
      twap: BigNumberish,
      expanded: BigNumberish,
      boardroomFunding: BigNumberish,
      daoFunding: BigNumberish,
      devFunding: BigNumberish,
      insuranceFunding: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addRedeemed(
      epochNumber: BigNumberish,
      added: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    epochInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEpochInfo(
      _start: BigNumberish,
      _numEpochs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextEpochPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governanceRecoverUnsupported(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalBoardroomFunding(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalDaoFunding(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDevFunding(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalInsuranceFunding(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
